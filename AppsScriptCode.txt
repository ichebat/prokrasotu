const DOC_ID = '1JPSzoAEUktlPgShanrrdZs3Vb5YwQVzlTeog8JmzWrI';
const API_TOKEN = SpreadsheetApp.openById(DOC_ID).getSheetByName("SD").getRange("B1").getValue().toString();//токен от телеграмм
const telegramUrl = "https://api.telegram.org/bot" + API_TOKEN;
var App_link = SpreadsheetApp.openById(DOC_ID).getSheetByName("SD").getRange("B2").getValue().toString();// URL для WebHook;
const MOMENTJS_link = SpreadsheetApp.openById(DOC_ID).getSheetByName("SD").getRange("B3").getValue().toString();
const WEB_APP_URL = SpreadsheetApp.openById(DOC_ID).getSheetByName("SD").getRange("B5").getValue().toString();//Web App Url для развернутого Angular
const TimeZoneHours = SpreadsheetApp.openById(DOC_ID).getSheetByName("SD").getRange("B6").getValue();//сдвиг в часах для конвертации времени сообщений от бота
const chat_id_master = SpreadsheetApp.openById(DOC_ID).getSheetByName("SD").getRange("B7").getValue();//chat id на который будут приходить уведомления от бота
const max_archive_length = SpreadsheetApp.openById(DOC_ID).getSheetByName("SD").getRange("B8").getValue();//если у пользователя больше заказов чем эта величина то старые завершенные будут уходить в архив
const PROVIDER_TOKEN = SpreadsheetApp.openById(DOC_ID).getSheetByName("SD").getRange("B9").getValue();//Токен провайдера для оплаты
const max_cart_length = SpreadsheetApp.openById(DOC_ID).getSheetByName("SD").getRange("B10").getValue();//если у пользователя корзина не обновлялась более Х дней то запись удаляется
const use_telegram_payment = SpreadsheetApp.openById(DOC_ID).getSheetByName("SD").getRange("B11").getValue();//формировать или нет ссылку на оплату через телеграм
const use_developer_button = SpreadsheetApp.openById(DOC_ID).getSheetByName("SD").getRange("B12").getValue();//показывать кнопку с контактами разработчика
const text_developer_button = SpreadsheetApp.openById(DOC_ID).getSheetByName("SD").getRange("B13").getValue();//показывать кнопку с контактами разработчика


const thisBotName = "ProKrasotuBot"; // имя бота (без @) для отправки администратору при начальной настройке полномочий (чтобы не запутаться)
//строка приветствия "Что умеет этот бот?"
const HELLO_BOT_STRING = SpreadsheetApp.openById(DOC_ID).getSheetByName("SD").getRange("B4").getValue().toString();
//"Здравствуйте. Используя бот https://t.me/"+thisBotName+ " вы можете оформить заказ товаров. \nНажмите на кнопку ниже, чтобы запустить приложение.";

//варианты работы с таблицами на разных листах
const CMD_ROW_UPDATE = 0;
const CMD_ROW_INSERT = 1;
const CMD_ROW_GET = 2;
const CMD_ROW_FILTER = 3;
const CMD_ROW_DELETE = 4;

/* ПОРЯДОК ЛИСТОВ НЕ НАРУШАТЬ! */

const LOG_SHEET_NAME = 'Лог';
const PRODUCT_SHEET_NAME = 'Продукты'
const CART_SHEET_NAME = 'Корзина';
const DELIVERY_SHEET_NAME = 'Доставка'
const ORDER_SHEET_NAME = 'Заказы'
const ARCHIVE_ORDER_SHEET_NAME = 'Заказы архив'

const LOG_SHEET_INDEX = 0;
const PRODUCT_SHEET_INDEX = 1;
const CART_SHEET_INDEX = 2;
const DELIVERY_SHEET_INDEX = 3;
const ORDER_SHEET_INDEX = 4;
const ARCHIVE_ORDER_SHEET_INDEX = 5;


//Листы, которые требуется создать
//перед началом работы выполнить функцию prepareSheetsAndColumns
const SHEETS_TO_CREATE = [LOG_SHEET_NAME,PRODUCT_SHEET_NAME,CART_SHEET_NAME,DELIVERY_SHEET_NAME,ORDER_SHEET_NAME,ARCHIVE_ORDER_SHEET_NAME];

const COLUMNS_ARRAY =[
  ["Лог последнего действия"],
  ["Код", "Ссылка, для автозагрузки данных", "Артикул", "Категория", "Подкатегория (тип)", "Бренд", "Линейка бренда", "Серия бренда", "Название", "Описание", "Дополнительно", "Ссылка на картинку", "Цена (руб.)", "Скидка (%)", "Новинка?", "Детали", "Доступно к покупке?"],
  ["Код", "chat_id", "Имя в телеграм", "Дата обновления", " Корзина (JSON)" ],
  ["Код", "Название доставки", "Описание", "Стоимость", "Бесплатно при сумме заказа", "Строка для быстрого поиска в dadata", "Использовать доставку (0 - нет, 1 - да)","Требуется ввод адреса (0 - нет, 1 - да)", "Сообщение клиенту"],
  //["Код","chat_id","Имя в telegram","Дата обновления","Список продуктов","Итого цена","Итого кол-во","Имя клиента","Имя клиента в telegram","Телефон клиента","Адрес доставки","Доставка","Дата заказа","Подтвержден в магазине?","Дата подтверждения","Заказ выполнен?","Дата выполнения","Заказ отклонен?","Дата отклонения","Причина отклонения","Заказ корректировался в магазине?","Дата корректировки","Описание корректировки","Примечание к заказу"]
  ["Код","chat_id","Имя в telegram","Дата обновления","Заказ (JSON)"],
  ["Код","Заказ (JSON)","Номер заказа#id","Список товаров#items","Сумма товаров#totalAmount", "Кол-во товаров#totalCount","Имя клиента#clientName","chat_id#clientTgChatId","Ник в Tg#clientTgName","Телефон#clientPhone","Адрес доставки#clientAddress","Доставка#delivery","Дата заказа#orderDate","Подтвержден в магазине?#isAccepted","Дата подтверждения#acceptDate","Завершен?#isCompleted","Дата завершения#completeDate","Отменен?#isCancelled","Дата отмены#cancellationDate","Причина отмены#cancellationReason","Скорректирован?#isCorrected","Дата коррекции#correctionDate","Причина коррекции#correctionReason","Описание#description","Оплачен online?#isClientPay","Дата оплаты#clientPayDate","Инфо об оплате#clientPayInfo"]
]

// const LOG_COLUMNS = ["Лог последнего действия"]; //колонки в листе Лог
// const PRODUCTS_COLUMNS = ["Номер по порядку", "Ссылка, для автозагрузки данных", "Артикул", "Категория", "Подкатегория (тип)", "Бренд", "Название", "Описание", "Дополнительно", "Ссылка на картинку", "Цена (руб.)", "Скидка (%)", "Новинка?"]; //колонки в листе Продукты

var isAdmin = false;

var KEYBOARD;
var KEYBOARD_ON_CHAT;
var KEYBOARD_ON_CHAT_ADMIN;
var REMOVE_KEYBOARD;


function setWebhook() {
  App_link = SpreadsheetApp.openById(DOC_ID).getSheetByName("SD").getRange("B2").getValue().toString();
  var url = telegramUrl + "/setWebhook?url=" + App_link;
  var response = UrlFetchApp.fetch(url);
}



function send (msg, chat_id)
{
  //все равно пустой текст не отправится
  if (msg == "") return;

//Отправляет сообщения в тлг. На вход функции дать сообщение и ID чата, в который нужно провести отправку
var payload = {
'method': 'sendMessage',
'chat_id': String(chat_id),
'text': msg,
'parse_mode': 'HTML'
} 
var data = {
"method": "post",
"payload": payload
}

try{
  UrlFetchApp.fetch('https://api.telegram.org/bot' + API_TOKEN + '/', data);
}
catch(e){};
//UrlFetchApp.fetch('https://api.telegram.org/bot' + API_TOKEN + '/', data);
}

function sendPhoto (photo, caption, chat_id)
{
  //все равно пустой текст не отправится
  if (photo == "") return;

//Отправляет фото в тлг по ссылке из photo. На вход функции дать сообщение и ID чата, в который нужно провести отправку
var payload = {
'method': 'sendPhoto',
'chat_id': String(chat_id),
'caption': String(caption),
'photo': String(photo),
'parse_mode': 'HTML'
} 

console.log(payload);
var data = {
"method": "post",
"payload": payload
}

try{
  UrlFetchApp.fetch('https://api.telegram.org/bot' + API_TOKEN + '/', data);
}
catch(e){};
//UrlFetchApp.fetch('https://api.telegram.org/bot' + API_TOKEN + '/', data);
}

// function getInvoice(id, deepLinkParameter, titleInvoice, descriptionInvoice, pricesList) {
//   const invoice = {
//     chat_id: id, // Уникальный идентификатор целевого чата или имя пользователя целевого канала
//     provider_token: PROVIDER_TOKEN, // токен выданный через бот @SberbankPaymentBot 
//     start_parameter: deepLinkParameter, //'get_access', //Уникальный параметр глубинных ссылок. Если оставить поле пустым, переадресованные копии отправленного сообщения будут иметь кнопку «Оплатить», позволяющую нескольким пользователям производить оплату непосредственно из пересылаемого сообщения, используя один и тот же счет. Если не пусто, перенаправленные копии отправленного сообщения будут иметь кнопку URL с глубокой ссылкой на бота (вместо кнопки оплаты) со значением, используемым в качестве начального параметра.
//     title: titleInvoice, //'InvoiceTitle', // Название продукта, 1-32 символа
//     description: descriptionInvoice,//'InvoiceDescription', // Описание продукта, 1-255 знаков
//     currency: 'RUB', // Трехбуквенный код валюты ISO 4217
//     prices: pricesList,//[{ label: 'Invoice Title', amount: 100 * 100 }], // Разбивка цен, сериализованный список компонентов в формате JSON 100 копеек * 100 = 100 рублей
//     payload: { // Полезные данные счета-фактуры, определенные ботом, 1–128 байт. Это не будет отображаться пользователю, используйте его для своих внутренних процессов.
//       unique_id: `${id}_${Number(new Date())}`,
//       provider_token: PROVIDER_TOKEN 
//     }
//   }

//   return invoice
// }

//функция для подтверждения готовности принять оплату
//если не ответить, то пользователь не сможет оплатить
function sendAnswerPreCheckoutQuery(pre_checkout_query_id){
//Пример сообщения при оплате на которое надо ответить
//   10.09.2024 16:00:13 919
// {
//      "update_id": 360414117,
//      "pre_checkout_query": {
//           "id": "5911616394385595828",
//           "from": {
//                "id": 1376405450,
//                "is_bot": false,
//                "first_name": "Ivan",
//                "last_name": "Che",
//                "username": "chebatz",
//                "language_code": "ru"
//           },
//           "currency": "RUB",
//           "total_amount": 30000,
//           "invoice_payload": "{provider_token=401643678:TEST:a6c2330c-dff9-4841-a551-5e35fc3fbc29, unique_id=1376405450_1725965867849}"
//      }
// }

 //все равно пустой текст не отправится
  if (pre_checkout_query_id == "") return;
  var payload = {
    'pre_checkout_query_id': String(pre_checkout_query_id),
    'ok': 'True'
  }
  var data = {
    "method": "post",
    "payload": payload
  }

  try{
  UrlFetchApp.fetch('https://api.telegram.org/bot' + API_TOKEN + '/answerPreCheckoutQuery', data);
}
catch(e){};
//UrlFetchApp.fetch('https://api.telegram.org/bot' + API_TOKEN + '/answerPreCheckoutQuery', data);

}

function send_invoice (chat_id, orderId, deepLinkParameter, titleInvoice, descriptionInvoice, pricesList)
{

//Отправляет сообщения в тлг. На вход функции дать сообщение и ID чата, в который нужно провести отправку
var payload = {
'method': 'sendInvoice',
'chat_id': String(chat_id),// Уникальный идентификатор целевого чата или имя пользователя целевого канала
'provider_token': PROVIDER_TOKEN,// токен выданный через бот @SberbankPaymentBot 
'start_parameter': deepLinkParameter, //'get_access', //Уникальный параметр глубинных ссылок. Если оставить поле пустым, переадресованные копии отправленного сообщения будут иметь кнопку «Оплатить», позволяющую нескольким пользователям производить оплату непосредственно из пересылаемого сообщения, используя один и тот же счет. Если не пусто, перенаправленные копии отправленного сообщения будут иметь кнопку URL с глубокой ссылкой на бота (вместо кнопки оплаты) со значением, используемым в качестве начального параметра.
'title': titleInvoice, //'InvoiceTitle', // Название продукта, 1-32 символа
'description': descriptionInvoice,//'InvoiceDescription', // Описание продукта, 1-255 знаков
'currency': 'RUB', // Трехбуквенный код валюты ISO 4217
'prices': pricesList,//[{ label: 'Invoice Title', amount: 100 * 100 }], // Разбивка цен, сериализованный список компонентов в формате JSON 100 копеек * 100 = 100 рублей
'payload': { // Полезные данные счета-фактуры, определенные ботом, 1–128 байт. Это не будет отображаться пользователю, используйте его для своих внутренних процессов.
      unique_id: `${String(orderId)}_${String(chat_id)}_${Number(new Date())}`,
      provider_token: PROVIDER_TOKEN 
    },
'parse_mode': 'HTML',
} 
var data = {
"method": "post",
"payload": payload
}


try{
  UrlFetchApp.fetch('https://api.telegram.org/bot' + API_TOKEN + '/sendInvoice', data);
}
catch(e){};
//UrlFetchApp.fetch('https://api.telegram.org/bot' + API_TOKEN + '/sendInvoice', data);
}

function send_key (msg, chat_id, keyboard)
{
var payload = {
'method': 'sendMessage',
'chat_id': String(chat_id),
'text': msg,
'parse_mode': 'HTML',
reply_markup : JSON.stringify(keyboard)
}

if (msg === '')
{
  payload = {
'method': 'sendMessage',
'chat_id': String(chat_id),
reply_markup : JSON.stringify(keyboard)
}
}

var data = {
"method": "post",
"payload": payload
}
try{
  UrlFetchApp.fetch('https://api.telegram.org/bot' + API_TOKEN + '/', data);
}
catch(e){};
//UrlFetchApp.fetch('https://api.telegram.org/bot' + API_TOKEN + '/', data);

}




function testFunction(){
  var searchArray = Array(COLUMNS_ARRAY[PRODUCT_SHEET_INDEX].length).fill("");
  searchArray[0] = '73'
  console.log([searchArray]);
  var product_row = updateTableRow( PRODUCT_SHEET_NAME, [searchArray], [0], CMD_ROW_GET);
  if (product_row != null) console.log(product_row);

  //var result = "";
  var chat_id = "1376405450";
  //[{ label: 'Invoice Title', amount: 100 * 100 }], // Разбивка цен, сериализованный список компонентов в формате JSON 100 копеек * 100 = 100 рублей
  //result = updateTableRow( DELIVERY_SHEET_NAME, [Array(COLUMNS_ARRAY[DELIVERY_SHEET_INDEX].length).fill("")], [], CMD_ROW_FILTER);
  //var invoice = getInvoice(chat_id, "_order_35", "Оплата заказа №35", "Описание для заказа №35", [{ label: 'Заголовок 1', amount: 100 * 100 }, { label: 'Заголовок 2', amount: 200 * 100 }])
  
  //console.log(JSON.stringify(invoice));
  //send_invoice(chat_id, 35, "_order_35", "Оплата заказа №35", "Описание для заказа №35", JSON.stringify([{ label: 'Заголовок 1', amount: 100 * 100 }, { label: 'Заголовок 2', amount: 200 * 100 }]))

  // udpateAllCartItems({'id':5,'url':'https://cehko.ru/catalog/kistochka/kistochka_c_ehko_bolshaya_chernaya_c_ehko_brush_big_black/','artikul':'12060','category':'Инструменты и аксессуары','type':'Аксессуары','brand':'C:EHKO','name':'Кисточка C:EHKO большая черная / C:EHKO BRUSH big black','description':'','dopolnitelno':'Вес (грамм): 20\nНазначение: аксессуары\nПроизводитель: Gebrueder Ewald GmbH','imageUrl':'https://cehko.ru/upload/resize_cache/iblock/93b/1200_1200_140cd750bba9870f18aada2478b24840a/92aut8syt21o1ooxcvh9fama8xvst2r1.jpg','price':300,'discount':0,'isNew':'Нет','translit':'kistochka-c-ehko-bolshaya-chernaya-c-ehko-brush-big-black'});

//   doPost({
//      "parameter": {},
//      "queryString": "",
//      "parameters": {},
//      "postData": {
//           "contents": JSON.stringify({
//      "update_id": 360414169,
//      "message": {
//           "message_id": 954,
//           "from": {
//                "id": 1376405450,
//                "is_bot": false,
//                "first_name": "Ivan",
//                "last_name": "Che",
//                "username": "chebatz",
//                "language_code": "ru"
//           },
//           "chat": {
//                "id": 1376405450,
//                "first_name": "Ivan",
//                "last_name": "Che",
//                "username": "chebatz",
//                "type": "private"
//           },
//           "date": 1726055948,
//           "successful_payment": {
//                "currency": "RUB",
//                "total_amount": 1000,
//                "invoice_payload": "{unique_id=1_1376405450_1726055886989, provider_token=401643678:TEST:a6c2330c-dff9-4841-a551-5e35fc3fbc29}",
//                "telegram_payment_charge_id": "6995875250_1376405450_67007",
//                "provider_payment_charge_id": "6995875250_1376405450_67007"
//           }
//      }
// }),
//           "length": 3291,
//           "name": "postData",
//           "type": "text/plain"
//      },
//      "contextPath": "",
//      "contentLength": 3291
// });

// doGet({
//      "parameter": {},
//      "queryString": "",
//      "parameters": {},
//      "postData": {
//           "contents": JSON.stringify({
//      "parameters": {
//           "chat_id": [
//                "619864883"
//           ],
//           "action": [
//                "getOrders"
//           ]
//      },
//      "parameter": {
//           "chat_id": "619864883",
//           "action": "getOrders"
//      },
//      "queryString": "action=getOrders&chat_id=619864883",
//      "contextPath": "",
//      "contentLength": -1
// }),
//           "length": 3291,
//           "name": "postData",
//           "type": "text/plain"
//      },
//      "contextPath": "",
//      "contentLength": 3291
// });

// doGet({
//      "parameters": {
//           "chat_id": [
//                "619864883"
//           ],
//           "action": [
//                "getOrders"
//           ]
//      },
//      "parameter": {
//           "chat_id": "619864883",
//           "action": "getOrders"
//      },
//      "queryString": "action=getOrders&chat_id=619864883",
//      "contextPath": "",
//      "contentLength": -1
// });

//   doPost({
//      "update_id": 360414272,
//      "callback_query": {
//           "id": "6002427890971472025",
//           "from": {
//                "id": 1397549149,
//                "is_bot": false,
//                "first_name": "anassz",
//                "username": "qhffgb",
//                "language_code": "ru",
//                "is_premium": true
//           },
//           "message": {
//                "message_id": 1570,
//                "from": {
//                     "id": 6995875250,
//                     "is_bot": true,
//                     "first_name": "ProKrasotuBot",
//                     "username": "prokrasotubot"
//                },
//                "chat": {
//                     "id": 1397549149,
//                     "first_name": "anassz",
//                     "username": "qhffgb",
//                     "type": "private"
//                },
//                "date": 1728740854,
//                "text": "💸 Ваш заказ обработан в магазине и ожидает оплаты.\nНомер заказа: 20\nСостав заказа:\n▶ [PEER] Крем-краска для волос EXTRA RED  (undefined) [ESTEL]: ₽252.00  * 6 шт.\nСумма товаров: ₽1512.00\nПозиций: 6 шт.\nАдрес доставки: ну там где я живу \nДоставка: Доставка по г.Ишимбай\nСтоимость доставки: ₽200.00\nБесплатная доставка при сумме заказа выше: ₽2000.00\nДата заказа: 12.10.2024 18:46\nГотов к оплате: 12.10.2024 18:47",
//                "entities": [
//                     {
//                          "offset": 0,
//                          "length": 51,
//                          "type": "bold"
//                     },
//                     {
//                          "offset": 52,
//                          "length": 16,
//                          "type": "bold"
//                     },
//                     {
//                          "offset": 86,
//                          "length": 7,
//                          "type": "italic"
//                     },
//                     {
//                          "offset": 93,
//                          "length": 70,
//                          "type": "italic"
//                     },
//                     {
//                          "offset": 93,
//                          "length": 31,
//                          "type": "bold"
//                     },
//                     {
//                          "offset": 219,
//                          "length": 18,
//                          "type": "italic"
//                     },
//                     {
//                          "offset": 380,
//                          "length": 14,
//                          "type": "bold"
//                     }
//                ],
//                "reply_markup": {
//                     "inline_keyboard": [
//                          [
//                               {
//                                    "text": "👀 Посмотреть заказ [20]",
//                                    "web_app": {
//                                         "url": "https://ichebat.github.io/prokrasotu/order/20"
//                                    }
//                               }
//                          ],
//                          [
//                               {
//                                    "text": "💸 Оплатить заказ [20] через Telegram",
//                                    "callback_data": "payOrder#20"
//                               }
//                          ],
//                          [
//                               {
//                                    "text": "😥 Отменить заказ [20]",
//                                    "web_app": {
//                                         "url": "https://ichebat.github.io/prokrasotu/order/20/cancel"
//                                    }
//                               }
//                          ]
//                     ]
//                }
//           },
//           "chat_instance": "2881395387264631968",
//           "data": "payOrder#20"
//      }
// });

}

function doGet(e){

  var result = "";
  //если используем moment то не забудь подключить библиотеку через fetch
  
  //подключаем moment.js для работы с датами
  eval(UrlFetchApp.fetch(MOMENTJS_link).getContentText());
  var update = e;
  updateTableRow( "Лог", [[(moment().format('DD.MM.YYYY HH:mm:ss'))+"\n"+JSON.stringify(update, null, 5)]], [], CMD_ROW_UPDATE);//логируем 

  

  var chat_id = "";
  if (update.hasOwnProperty('parameter') && update.parameter.hasOwnProperty('chat_id')) chat_id = update.parameter.chat_id;

  isAdmin = checkIsAdmin(chat_id);

  var action = "";
  if (update.hasOwnProperty('parameter') && update.parameter.hasOwnProperty('action')) action = update.parameter.action;

  var cart = "";
  if (action.toString().toLowerCase()=='getcart')
  {
    if (chat_id)
    {
      var cart_row = updateTableRow( CART_SHEET_NAME, [[0, chat_id, "",(moment().format('DD.MM.YYYY HH:mm:ss')), ""]], [1], CMD_ROW_GET);
      if (cart_row != null) cart = cart_row[0][4]; 
      result = cart;
    }
  }

  var orders = [];
  if (action.toString().toLowerCase()=='getorders')
  {
     
    if (chat_id)
    {
      var order_rows = null;
      
      //if (chat_id == chat_id_master) //для master возвращаем все заказы
      if (isAdmin)
        order_rows = updateTableRow( ORDER_SHEET_NAME, [[0, "", "",(moment().format('DD.MM.YYYY HH:mm:ss')), ""]], [], CMD_ROW_FILTER);
        else //иначе последние 10 для выбранного chat_id
        order_rows = updateTableRow( ORDER_SHEET_NAME, [[0, chat_id, "",(moment().format('DD.MM.YYYY HH:mm:ss')), ""]], [1], CMD_ROW_FILTER);
      if (order_rows != null) 
      {
        console.log(order_rows.length);
        //order_rows.splice(chat_id != chat_id_master?order_rows.length-max_archive_length:0).forEach(row => {
        order_rows.splice(!isAdmin?order_rows.length-max_archive_length:0).forEach(row => {
          orders.push(row[4]);
      });
      }
      result = orders;
    }
  }

  var delivery=[];
  if (action.toString().toLowerCase()=='getdelivery')
  {
      var rows = updateTableRow( DELIVERY_SHEET_NAME, [Array(COLUMNS_ARRAY[DELIVERY_SHEET_INDEX].length).fill("")], [], CMD_ROW_FILTER);
      if (rows != null) rows.forEach(item=>{
        var deliveryItem = {
          id: item[0],
          name: item[1],
          description: item[2],
          amount: item[3],
          freeAmount: item[4],
        };
        delivery.push(deliveryItem)
      }); 
      result = delivery;
  }
  
  //строка ниже нужна чтобы не ловить CORS ошибку в сторонних приложениях
  return ContentService.createTextOutput(JSON.stringify(result)).setMimeType(ContentService.MimeType.JSON);
  
};

function doPost(e) {
  //если используем moment то не забудь подключить библиотеку через fetch
   //updateTableRow( "Лог", [[(moment().format('DD.MM.YYYY HH:mm:ss'))+"\n"+JSON.stringify(e, null, 5)]], [], CMD_ROW_UPDATE);//логируем 
   //return;
  
  //подключаем moment.js для работы с датами
  eval(UrlFetchApp.fetch(MOMENTJS_link).getContentText());

  //тело запроса
  var update = JSON.parse(e.postData.contents);
  //var update = e; //вернуть строку как было выше

  updateTableRow( "Лог", [[(moment().format('DD.MM.YYYY HH:mm:ss'))+"\n"+JSON.stringify(update, null, 5)]], [], CMD_ROW_UPDATE);//логируем 

    /*****
     * 
     * 
     * 
     * 
     * Получено сообщение от бота об оплате, на которое если ответить ОК, то пользователь сможет оплатить товар
     * 
     * 
     * 
     */
  if (update.hasOwnProperty('pre_checkout_query')){
    var pre_checkout_query_id = "";
    if (update.pre_checkout_query.hasOwnProperty('id')) pre_checkout_query_id = update.pre_checkout_query.id;
    

    if (pre_checkout_query_id != "" && pre_checkout_query_id != null)
    {

      var chat_id = "";
      try
      {
        if (update.pre_checkout_query.hasOwnProperty('from'))
        {
          if (update.pre_checkout_query.from.hasOwnProperty('id')) chat_id = update.pre_checkout_query.from.id;
        }
      }
      catch(e){}

      var orderId = 0;
      try
      {
        //send("Запрос получен по заказу "+update.pre_checkout_query.invoice_payload.toString().toLowerCase().slice(update.pre_checkout_query.invoice_payload.toString().toLowerCase().indexOf("unique_id")+10).split('_')[0], chat_id);
        orderId = parseInt(update.pre_checkout_query.invoice_payload.toString().toLowerCase().slice(update.pre_checkout_query.invoice_payload.toString().toLowerCase().indexOf("unique_id")+10).split('_')[0]);
        //JSON.parse(update.pre_checkout_query.invoice_payload).unique_id
      }
      catch(e){}

      if (orderId>0 && (""+chat_id).length>0)
      {
        var order = null;
        var order_row = updateTableRow( ORDER_SHEET_NAME, [[orderId, "", "","", ""]], [0], CMD_ROW_GET);
        if (order_row != null) order = JSON.parse(order_row[0][4]);
        if (order!= null)
        {
          //заказ можно оплачивать
          if ( order.isAccepted && !order.isCompleted && !order.isCancelled)
          {
            if (!order.isClientPay){
              sendAnswerPreCheckoutQuery(pre_checkout_query_id);
            }
            else
            {
              send("Заказ уже был оплачен ранее", chat_id);
            }
            
          }
          else
          if ( order.isAccepted && order.isCompleted)
          {
            send("Нельзя оплатить завершенный заказ", chat_id);
          }
          else
          if ( order.isAccepted && order.isCancelled)
          {
            send("Нельзя оплатить отмененный заказ", chat_id);
          }
          else
          if (!order.isAccepted && !order.isCompleted && !order.isCancelled)
          {
            send("Нельзя оплатить заказ, который находится в обработке у продавца", chat_id);
          }
          else{
            send("Не удалось оплатить заказ", chat_id);
          }
        }       
      }
    }
  }

     /*****
     * 
     * 
     * 
     * 
     * Получено сообщение от бота об успешной оплате, сообщаем об этом
     * 
     * 
     * 
     */
  if (update.hasOwnProperty('message') && update.message.hasOwnProperty('successful_payment')){
    var msgForClient = "🥳 Заказ успешно оплачен!";
    var msgForSeller = "🥳 Поступила оплата за заказ.";
    
    {
      var chat_id = "";
      try
      {
        if (update.message.hasOwnProperty('from'))
        {
          if (update.message.from.hasOwnProperty('id')) chat_id = update.message.from.id;
        }
      }
      catch(e){}

      var user = ""; //логин пользователя Telegram от кого пришло сообщение
      if (update.hasOwnProperty('message')) user = update.message.from.username;

      

      var orderId = 0;
      try
      {
        //send("Запрос получен по заказу "+update.message.successful_payment.invoice_payload, chat_id);
        //send("Запрос получен по заказу "+update.pre_checkout_query.invoice_payload.toString().toLowerCase().slice(update.pre_checkout_query.invoice_payload.toString().toLowerCase().indexOf("unique_id")+10).split('_')[0], chat_id);
        orderId = parseInt(update.message.successful_payment.invoice_payload.toString().toLowerCase().slice(update.message.successful_payment.invoice_payload.toString().toLowerCase().indexOf("unique_id")+10).split('_')[0]);
        
        //JSON.parse(update.pre_checkout_query.invoice_payload).unique_id
      }
      catch(e){}

      

      if (orderId>0 && (""+chat_id).length>0)
      {
        var order = null;
        var order_row = updateTableRow( ORDER_SHEET_NAME, [[orderId, "", "","", ""]], [0], CMD_ROW_GET);
        if (order_row != null) order = JSON.parse(order_row[0][4]);
        if (order!= null)
        {
          order.isClientPay = true;
          order.clientPayDate = new Date();
          order.clientPayInfo = JSON.stringify(update.message.successful_payment);

          updateTableRow( ORDER_SHEET_NAME, [[orderId, order.clientTgChatId, order.clientTgName,(moment().format('DD.MM.YYYY HH:mm:ss')), JSON.stringify(order)]], [0], CMD_ROW_UPDATE);

          KEYBOARD_ON_CHAT = {}; 
          KEYBOARD_ON_CHAT.parse_mode = "HTML"
          KEYBOARD_ON_CHAT.inline_keyboard = [];

          KEYBOARD_ON_CHAT_ADMIN = {}; 
          KEYBOARD_ON_CHAT_ADMIN.parse_mode = "HTML"
          KEYBOARD_ON_CHAT_ADMIN.inline_keyboard = [];

          var index = 0;
            
          index = KEYBOARD_ON_CHAT.inline_keyboard.length;
          KEYBOARD_ON_CHAT.inline_keyboard[index] = [];
          KEYBOARD_ON_CHAT.inline_keyboard[index][0] = {
            text:   "👀 Посмотреть заказ ["+orderId.toString()+"]",
            web_app: {"url": WEB_APP_URL+"/order/"+orderId.toString()}
          };

          send_key("<b>"+msgForClient+"</b>\n"+getOrderDescription(order, 0), chat_id, KEYBOARD_ON_CHAT);
          //send("<b>"+msgForClient+"</b>", chat_id);

          index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
          KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
          KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
            text:   "👀 Посмотреть заказ ["+orderId.toString()+"]",
            web_app: {"url": WEB_APP_URL+"/order/"+orderId.toString()}
          };
          
          chat_id_master.toString().split(';').forEach(chat_id_item=>{
            if ((""+chat_id_item.trim()).length >0){
              send_key("<b>"+msgForSeller+"</b>\n"+getOrderDescription(order, 1), chat_id_item, KEYBOARD_ON_CHAT_ADMIN);
              //send("<b>"+msgForSeller+"</b>\n"+getOrderDescription(order, 1), chat_id_item);
            }
          });
        }       
      }
    }
  }

  //нам нужен только тип "сообщение", если в чат напечатали команду, или callback, если в чате нажали кнопку
  if (update.hasOwnProperty('postData') && update.postData.hasOwnProperty('contents'))
  {
    update = update.postData.contents
  }

  if (update.hasOwnProperty('message') || update.callback_query) 
  {
    var msg = "";
    if (update.hasOwnProperty('message')) msg = update.message;
    if (update.callback_query) msg = update.callback_query.message;

    var message_id = "";
    if (update.hasOwnProperty('message')) message_id = update.message.message_id;
    if (update.callback_query) message_id = update.callback_query.message.message_id;

    var chat_id = ""; //код чата с пользователем
    if (update.hasOwnProperty('message')) chat_id = msg.chat.id;
    if (update.callback_query) chat_id = update.callback_query.from.id;

    var msgIsPrivate = true; //тип чата с пользователем (private если с пользователем)
    if (update.hasOwnProperty('message')) msgIsPrivate = msg.chat.type == "private";
    if (update.callback_query) msgIsPrivate = update.callback_query.message.chat.type == "private"

    var isCallBackButton = false;

    var text = ""; //текст отправленной команды или надпись на кнопке
    if (update.hasOwnProperty('message')&& update.message.hasOwnProperty('text')) text = msg.text;
    if (update.callback_query) 
    //if (update.callback_query.data.toString().split("#")[0]) text = update.callback_query.data.toString().split("#")[0];
    if (update.callback_query.data.toString()) {
      text = update.callback_query.data.toString();
       isCallBackButton = true;
     }

    
    var user = ""; //логин пользователя Telegram от кого пришло сообщение
    if (update.hasOwnProperty('message')) user = msg.from.username;
    if (update.callback_query) user = msg.chat.username;

    var web_app_data = ""; //Сообщение, полученное от webApp в боте
    if (update.hasOwnProperty('message') && msg.hasOwnProperty('web_app_data')) {
      try{
        web_app_data = JSON.parse(msg.web_app_data.data);
      } 
      catch(e){};
      
    }

    //у некоторых пользователей нет username, используем chat_id 
    if (user == "" || user == null)
    {
      user = chat_id;
    };

    isAdmin = checkIsAdmin(chat_id) || checkIsAdmin(user);

    var date = moment('01.01.1970').add(msg.date, 'seconds').add(TimeZoneHours, 'hours').format('DD.MM.YYYY HH:mm:ss');//(msg.date/86400)+25569.125;

    /*if (update.callback_query){
    send("Callback!; ", chat_id, API_TOKEN); 
    send("Callback; "+JSON.stringify(update), chat_id, API_TOKEN); 
    send("chat_id: "+chat_id, chat_id, API_TOKEN); 
    send("text: "+text, chat_id, API_TOKEN); 
    send("date: "+date, chat_id, API_TOKEN); 
    send("user: "+user+"; ", chat_id, API_TOKEN); 
    }


    if (update.hasOwnProperty('message')){
    send("Default!; ", chat_id, API_TOKEN); 
    send("msg: "+JSON.stringify(msg)+"; ", chat_id, API_TOKEN); 
    send("chat_id: "+chat_id, chat_id, API_TOKEN); 
    send("text: "+text, chat_id, API_TOKEN); 
    send("date: "+date, chat_id, API_TOKEN); 
    send("user: "+user+"; ", chat_id, API_TOKEN); 
    if (msg.hasOwnProperty('web_app_data'))
    {
      send("WebAPP!; ", chat_id, API_TOKEN); 
      send("web_app_data: "+JSON.stringify(web_app_data)+"; ", chat_id, API_TOKEN);
      
      setTimeout(async ()=>{
        await send("Получено сообщение от WebApp: ", chat_id);
      }, 5000);
    }
    }//*/

    if (text=="/hello")
    {
      send("Hello WORLD", chat_id);
    }


    //пользовательская команда получена, формируем меню в ответ на его запрос

    //updateTableRow( "Лог", [[JSON.stringify(update, null, 5)]], [], CMD_ROW_UPDATE);//логируем 

    
    //вход в процедуру обработки событий нажатий кнопок и отправки текста в боте
    //работает только для типа private (от пользователя)
    if (msgIsPrivate) doAction(chat_id, message_id, text, isCallBackButton, user);

  }

  //блок обработки запросов от бота телеграм закончился
  

  //если пользователь послал действие через бота в POST запросе (через сайт)
  if (update.hasOwnProperty('action'))
  {
    var actionResult = {};
    var action = "";
    if (update.hasOwnProperty('action')) action = update.action;   

    
    /*****
     * 
     * 
     * 
     * 
     * Получена обратная связь через форму на сайте
     * 
     * 
     * 
     */
    if (action.toString().toLowerCase()=='feedback')
    {
      var chat_id = "";
      if (update.hasOwnProperty('chat_id')) chat_id = update.chat_id;
      
      var userName = "";
      if (update.hasOwnProperty('userName')) userName = update.userName;
      
      var clientPhone = "";
      if (update.hasOwnProperty('clientPhone')) clientPhone = update.clientPhone;

      var clientName = "";
      if (update.hasOwnProperty('clientName')) clientName = update.clientName;
      
      var feedbackMessage = "";
      if (update.hasOwnProperty('feedbackMessage')) feedbackMessage = update.feedbackMessage;

      //если сообщение заполнено полностью пересылаем на админский чат
      if ((chat_id != "" && chat_id != null) && (clientPhone != "" && clientPhone != null) && (clientName != "" && clientName != null) && (feedbackMessage != "" && feedbackMessage != null))
      {
        // send("<b>📨 Получено сообщение через форму обратной связи:</b>\n"+
        // "❗"+feedbackMessage+"❗"+"\n"+
        // "<b>Имя:</b> "+clientName+"\n"+
        // "<b>Телефон для связи:</b> "+formatPhoneNumber(clientPhone)+"\n"+
        // ((userName != "" && userName != null)?("<b>Написать в telegram:</b> @"+userName+"\n"):("")), chat_id_master);
        chat_id_master.toString().split(';').forEach(chat_id_item=>{
          if ((""+chat_id_item.trim()).length >0){
            send("<b>📨 Получено сообщение через форму обратной связи:</b>\n"+
            "❗"+feedbackMessage+"❗"+"\n"+
            "<b>Имя:</b> "+clientName+"\n"+
            "<b>Телефон для связи:</b> "+formatPhoneNumber(clientPhone)+"\n"+
            ((userName != "" && userName != null)?("<b>Написать в telegram:</b> @"+userName+"\n"):("")), chat_id_item);
          }
        });
      }      
    }

    /*****
     * 
     * 
     * 
     * 
     * Пользователь нажал на кнопку "получить изображение"
     * 
     * 
     * 
     */
    if (action.toString().toLowerCase()=='sendphoto')
    {
      var chat_id = "";
      if (update.hasOwnProperty('chat_id')) chat_id = update.chat_id;
      
      var photo = "";
      if (update.hasOwnProperty('photo')) photo = update.photo;
      
      var caption = "";
      if (update.hasOwnProperty('caption')) caption = update.caption;

      //если сообщение заполнено полностью пересылаем на админский чат
      if ((chat_id != "" && chat_id != null) && (photo != "" && photo != null) && (caption != "" && caption != null) )
      {
          send("<b>🖼 Чтобы посмотреть ["+caption+"], нажмите на ссылку:</b>\n"+
            photo, chat_id);
        sendPhoto (photo, caption, chat_id)    
        actionResult = {status: "success", message: "Ссылка на скачивание ["+caption+"] отправлена вам в Telegram", data: {action: action}};    
        //send(photo, chat_id);
      }      
    }


    /*****
     * 
     * 
     * 
     * 
     * пришел запрос на обновление корзины
     * 
     * 
     * 
     * 
     * 
     */
    //Обновление корзины
    if (action.toString().toLowerCase()=='addcart' || action.toString().toLowerCase()=='removecart')
    {
      var chat_id = "";
      if (update.hasOwnProperty('chat_id')) chat_id = update.chat_id;
      
      var userName = "";
      if (update.hasOwnProperty('userName')) userName = update.userName;
      
      var cart = "";
      if (update.hasOwnProperty('cart')) cart = update.cart;

      if (cart && cart.items && cart.items.length>0)
      {
        updateTableRow( CART_SHEET_NAME, [[0, chat_id, userName,(moment().format('DD.MM.YYYY HH:mm:ss')), JSON.stringify(cart)]], [1], CMD_ROW_UPDATE);
        actionResult = {status: "success", message: "Корзина обновлена", data: {action: action}};
      }
      else
      {
        updateTableRow( CART_SHEET_NAME, [[0, chat_id, userName,(moment().format('DD.MM.YYYY HH:mm:ss')), JSON.stringify(cart)]], [1], CMD_ROW_DELETE);
        actionResult = {status: "success", message: "Корзина очищена", data: {action: action}};
      }
    }

    /*****
     * 
     * 
     * 
     * 
     * пришел запрос на изменение заказа
     * 
     * 
     * 
     * 
     * 
     */
    //Работа с заказами
    //addorder - создание заказа
    //removeorder - удаление заказа
    //updateorder - обновление заказа
    if (action.toString().toLowerCase()=='addorder' || action.toString().toLowerCase()=='updateorder')
    {

      
      var msgForClient = "";
      var msgForSeller = "";

      var chat_id = "";
      if (update.hasOwnProperty('chat_id')) chat_id = update.chat_id;
      
      var userName = "";
      if (update.hasOwnProperty('userName')) userName = update.userName;
      
      var order = "";
      if (update.hasOwnProperty('order')) order = update.order;

      var order_chat_id = "";
      if (order.hasOwnProperty('clientTgChatId')) order_chat_id = order.clientTgChatId;

      var order_userName = "";
      if (order.hasOwnProperty('clientTgName')) order_userName = order.clientTgName;
      
      if (action.toString().toLowerCase()=='removeorder')
      {
        

        var id = "";
        if (order.hasOwnProperty('id')) id = order.id;
        if (id > 0) {
          msgForClient = "Удален заказ. Номер заказа: "+id.toString();
          msgForSeller = "Удален заказ. Номер заказа: "+id.toString();
          
          updateTableRow( ORDER_SHEET_NAME, [[id, order_chat_id, order_userName,(moment().format('DD.MM.YYYY HH:mm:ss')), JSON.stringify(order)]], [0,1], CMD_ROW_DELETE);
          actionResult = {status: "success", message: msgForClient, data: {action: action, id: id}};
          
          if (order_chat_id) 
          send("<b>"+msgForClient+"</b>", order_chat_id);
          //send("<b>"+msgForSeller+"</b>\n"+getOrderDescription(order, 1), chat_id_master);
          chat_id_master.toString().split(';').forEach(chat_id_item=>{
            if ((""+chat_id_item.trim()).length >0){
              send("<b>"+msgForSeller+"</b>\n"+getOrderDescription(order, 1), chat_id_item);
            }
          });

        }
      }
      else

      if (order && order.items && order.items.length>0)
      {
        msgForClient = "Скорректирован заказ.";
        msgForSeller = "Скорректирован заказ.";

        var id = "";
        if (order.hasOwnProperty('id')) id = order.id;

       
        var isAccepted = false;
        if (order.hasOwnProperty('isAccepted')) isAccepted = order.isAccepted;

        var isCompleted = false;
        if (order.hasOwnProperty('isCompleted')) isCompleted = order.isCompleted;

        var isCancelled = false;
        if (order.hasOwnProperty('isCancelled')) isCancelled = order.isCancelled;

        //происходит обновления записи по id, если addorder то заказ прилетает с id=0
        var order_row = updateTableRow( ORDER_SHEET_NAME, [[id, order_chat_id, order_userName,(moment().format('DD.MM.YYYY HH:mm:ss')), JSON.stringify(order)]], [0], CMD_ROW_UPDATE);
        actionResult = {status: "success", message: msgForClient, data: {action: action, id: id}};

        if (action.toString().toLowerCase()=='addorder')
        {

          
          
          //если НОВЫЙ заказ прилетел с id=0, то надо еще раз обновить строку, перезаписав order.id
          if (order_row != null) 
          {
            id = order_row[0][0];
            order.id = order_row[0][0];
          }

          //новая строка получила номер
          if (id > 0) {
            msgForClient = "👏 Ваш заказ направлен в обработку в магазин.";
            msgForSeller = "👏 Поступил новый заказ.";

            updateTableRow( ORDER_SHEET_NAME, [[id, order_chat_id, order_userName,(moment().format('DD.MM.YYYY HH:mm:ss')), JSON.stringify(order)]], [0], CMD_ROW_UPDATE);
            actionResult = {status: "success", message: msgForClient, data: {action: action, id: id}};

            KEYBOARD_ON_CHAT = {}; 
            KEYBOARD_ON_CHAT.parse_mode = "HTML"
            KEYBOARD_ON_CHAT.inline_keyboard = [];

            KEYBOARD_ON_CHAT_ADMIN = {}; 
            KEYBOARD_ON_CHAT_ADMIN.parse_mode = "HTML"
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard = [];

            var index = 0;
            
            index = KEYBOARD_ON_CHAT.inline_keyboard.length;
            KEYBOARD_ON_CHAT.inline_keyboard[index] = [];
            KEYBOARD_ON_CHAT.inline_keyboard[index][0] = {
              text:   "👀 Посмотреть заказ ["+id.toString()+"]",
              //callback_data: "В магазин callback_data",
              web_app: {"url": WEB_APP_URL+"/order/"+id.toString()}
            };

            if (!isAccepted)
            {
            index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
              text:   "🔧 Редактировать заказ ["+id.toString()+"]",
              web_app: {"url": WEB_APP_URL+"/order/"+id.toString()+'/edit'}
            };
            }
            else
            {
            index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
              text:   "👀 Посмотреть заказ ["+id.toString()+"]",
              web_app: {"url": WEB_APP_URL+"/order/"+id.toString()}
            };

            }
            if (!isCancelled)
            {
              index = KEYBOARD_ON_CHAT.inline_keyboard.length;
              KEYBOARD_ON_CHAT.inline_keyboard[index] = [];
              KEYBOARD_ON_CHAT.inline_keyboard[index][0] = {
                text:   "😥 Отменить заказ ["+id.toString()+"]",
                web_app: {"url": WEB_APP_URL+"/order/"+id.toString()+'/cancel'}
              }; 

              index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
              KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
              KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
                text:   "😥 Отменить заказ ["+id.toString()+"]",
                web_app: {"url": WEB_APP_URL+"/order/"+id.toString()+'/cancel'}
              }; 
            }

            //сначала отправляем клиенту. 
            //отправляем только если заказ сделан через телеграм web_app, если с сайта то chat_id == userName == ""
            if (order_chat_id) 
            send_key("<b>"+msgForClient+"</b>\n"+getOrderDescription(order, 0), order_chat_id, KEYBOARD_ON_CHAT);

            if (!isAccepted)
            {
              index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
              KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
              KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
                text:   "💸 Заказ ["+id.toString()+"] готов к оплате",
                web_app: {"url": WEB_APP_URL+"/order/"+id.toString()+'/accept'}
              };   
            }

            

            //у магазина больше кнопок
            //send_key("<b>"+msgForSeller+"</b>\n"+getOrderDescription(order, 1), chat_id_master, KEYBOARD_ON_CHAT_ADMIN);
            chat_id_master.toString().split(';').forEach(chat_id_item=>{
              if ((""+chat_id_item.trim()).length >0){
                send_key("<b>"+msgForSeller+"</b>\n"+getOrderDescription(order, 1), chat_id_item, KEYBOARD_ON_CHAT_ADMIN);
              }
            });

            //send("Ваш заказ поступил в обработку. Номер заказа: ["+id.toString()+"].\n"+getOrderDescription(order), chat_id);
          }
        }

        //редактирование заказа может включать в себя подтверждение (accept) отмену (cancel) завершение (complete) и редактирование (edit)
        if (action.toString().toLowerCase()=='updateorder')
        {     
            

          if (id > 0) {
            KEYBOARD_ON_CHAT = {}; 
            KEYBOARD_ON_CHAT.parse_mode = "HTML"
            KEYBOARD_ON_CHAT.inline_keyboard = [];

            KEYBOARD_ON_CHAT_ADMIN = {}; 
            KEYBOARD_ON_CHAT_ADMIN.parse_mode = "HTML"
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard = [];

            var index = 0;

            index = KEYBOARD_ON_CHAT.inline_keyboard.length;
            KEYBOARD_ON_CHAT.inline_keyboard[index] = [];
            KEYBOARD_ON_CHAT.inline_keyboard[index][0] = {
              text:   "👀 Посмотреть заказ ["+id.toString()+"]",
              web_app: {"url": WEB_APP_URL+"/order/"+id.toString()}
            };

            if (!isAccepted)
            {
            index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
              text:   "🔧 Редактировать заказ ["+id.toString()+"]",
              web_app: {"url": WEB_APP_URL+"/order/"+id.toString()+'/edit'}
            };
            }
            else
            {
            index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
              text:   "👀 Посмотреть заказ ["+id.toString()+"]",
              web_app: {"url": WEB_APP_URL+"/order/"+id.toString()}
            };
            }


            if (isAccepted && !isCancelled && !isCompleted){
              msgForClient = "💸 Ваш заказ обработан в магазине и ожидает оплаты.";
              msgForSeller = "💸 Статус заказа изменен [Ожидает оплаты].";

              if (use_telegram_payment)
              {
                index = KEYBOARD_ON_CHAT.inline_keyboard.length;
                KEYBOARD_ON_CHAT.inline_keyboard[index] = [];
                KEYBOARD_ON_CHAT.inline_keyboard[index][0] = {
                  text:   "💸 Оплатить заказ ["+id.toString()+"] через Telegram",
                  callback_data: "payOrder#"+id.toString(),              
                };
              }

            }

            if (isCancelled){
              msgForClient = "😥 Заказ отменен.";
              msgForSeller = "😥 Заказ отменен.";
              if (order_chat_id)
              send("<b>"+msgForClient+"</b>\n"+getOrderDescription(order, 0), order_chat_id);
            }
            if (isCompleted){
              msgForClient = "👍 Заказ выполнен.";
              msgForSeller = "👍 Заказ выполнен.";
              if (order_chat_id) 
              send("<b>"+msgForClient+"</b>\n"+getOrderDescription(order, 0), order_chat_id);
            }

            actionResult = {status: "success", message: msgForSeller, data: {action: action, id: id}};

            
            
            

            if (!isCancelled)
            {
              index = KEYBOARD_ON_CHAT.inline_keyboard.length;
              KEYBOARD_ON_CHAT.inline_keyboard[index] = [];
              KEYBOARD_ON_CHAT.inline_keyboard[index][0] = {
                text:   "😥 Отменить заказ ["+id.toString()+"]",
                web_app: {"url": WEB_APP_URL+"/order/"+id.toString()+'/cancel'}
              }; 

              index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
              KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
              KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
                text:   "😥 Отменить заказ ["+id.toString()+"]",
                web_app: {"url": WEB_APP_URL+"/order/"+id.toString()+'/cancel'}
              }; 
            }

            //сначала отправляем клиенту. 
            //отправляем только если заказ сделан через телеграм web_app, если с сайта то chat_id == userName == ""
            if (order_chat_id && isAccepted && !isCancelled && !isCompleted)
            send_key("<b>"+msgForClient+"</b>\n"+getOrderDescription(order, 0), order_chat_id, KEYBOARD_ON_CHAT);
            
            if (!isAccepted)
            {
              index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
              KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
              KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
                text:   "💸 Заказ ["+id.toString()+"] готов к оплате",
                web_app: {"url": WEB_APP_URL+"/order/"+id.toString()+'/accept'}
              };   
            }

            if (isAccepted && !isCompleted && !isCancelled)
            {
              index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
              KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
              KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
                text:   "👍 Завершить заказ ["+id.toString()+"]",
                web_app: {"url": WEB_APP_URL+"/order/"+id.toString()+'/complete'}
              }; 
            }

            
            
            //Если заказ еще не завершен, то бот дает выбор действий с ним
            if (!isCompleted && !isCancelled)
            {
              //send_key("<b>"+msgForSeller+"</b>\n"+getOrderDescription(order, 1), chat_id_master, KEYBOARD_ON_CHAT_ADMIN);
              chat_id_master.toString().split(';').forEach(chat_id_item=>{
                if ((""+chat_id_item.trim()).length >0){
                  send_key("<b>"+msgForSeller+"</b>\n"+getOrderDescription(order, 1), chat_id_item, KEYBOARD_ON_CHAT_ADMIN);
                }
              });
              
            }
            else
            //если заказ уже завершен (выполнен или отклонен), то действий не требуется
            {
              send("<b>"+msgForClient+"</b>\n"+getOrderDescription(order,1), chat_id);
              //send("<b>"+msgForSeller+"</b>\n"+getOrderDescription(order,1), chat_id_master);
              chat_id_master.toString().split(';').forEach(chat_id_item=>{
                if ((""+chat_id_item.trim()).length >0){
                  send("<b>"+msgForSeller+"</b>\n"+getOrderDescription(order,1), chat_id_item);
                }
              });
            }

            //send("Ваш заказ поступил в обработку. Номер заказа: "+id.toString(), chat_id);
          }
        }
      }
      
    }

    /*****
     * 
     * 
     * 
     * 
     * пришел запрос на изменение товара
     * 
     * 
     * 
     * 
     * 
     */
    //Работа с товарами
    //addproduct - создание товара
    //removeproduct - удаление товара
    //updateproduct - обновление товара
    if (action.toString().toLowerCase()=='addproduct' || action.toString().toLowerCase()=='updateproduct' || action.toString().toLowerCase()=='removeproduct')
    {
      var msgForClient = "";
      var msgForSeller = "";

      var chat_id = "";
      if (update.hasOwnProperty('chat_id')) chat_id = update.chat_id;
      
      var userName = "";
      if (update.hasOwnProperty('userName')) userName = update.userName;
      
      var product = "";
      if (update.hasOwnProperty('product')) product = update.product;
      
      if (action.toString().toLowerCase()=='removeproduct')
      {
        

        var id = "";
        if (product.hasOwnProperty('id')) id = product.id;
        if (id > 0) {
          msgForClient = "Удален продукт. Номер продукта: "+id.toString();
          msgForSeller = "Удален продукт. Номер продукта: "+id.toString();

          var searchArray = Array(COLUMNS_ARRAY[PRODUCT_SHEET_INDEX].length).fill("");
          searchArray[0] = id;
          
          //updateTableRow( PRODUCT_SHEET_NAME, [[id, Array(COLUMNS_ARRAY[PRODUCT_SHEET_INDEX].length-1).fill("")]], [0], CMD_ROW_DELETE);
          updateTableRow( PRODUCT_SHEET_NAME, [searchArray], [0], CMD_ROW_DELETE);
          actionResult = {status: "success", message: msgForClient, data: {action: action, id: id}};

          removeFromAllCartItems(product);
          
          //send("<b>"+msgForSeller+"</b>", chat_id_master);
          chat_id_master.toString().split(';').forEach(chat_id_item=>{
            if ((""+chat_id_item.trim()).length >0){
              send("<b>"+msgForSeller+"</b>", chat_id_item);
            }
          });

        }
      }
      else
      {
        msgForClient = "Скорректирован продукт.";
        msgForSeller = "Скорректирован продукт.";

        var id = "";
        if (product.hasOwnProperty('id')) id = product.id;

        var productName = "";
        if (product.hasOwnProperty('name')) productName = product.name;
        if ((""+productName.toString()).length>0) {
          msgForClient += " "+productName;
          msgForSeller += " "+productName;
        }

        //происходит обновления записи по id, если addproduct то продукт прилетает с id=0
        var product_row = updateTableRow( PRODUCT_SHEET_NAME, [[id, product.url, product.artikul, product.category, product.type, product.brand, product.brandLine, product.brandSeries, product.name, product.description, product.dopolnitelno, product.imageUrl, product.price, product.discount, product.isNew, JSON.stringify(product.detail), product.isActive]], [0], CMD_ROW_UPDATE);
        actionResult = {status: "success", message: msgForSeller, data: {action: action, id: id}};

        if (action.toString().toLowerCase()=='addproduct')
        {

          
          
          //если НОВЫЙ продукт прилетел с id=0, то надо еще раз обновить строку, перезаписав id
          if (product_row != null) 
          {
            id = product_row[0][0];
            product.id = product_row[0][0];
          }

          //новая строка получила номер
          if (id > 0) {
            msgForClient = "👏 Добавлен новый продукт.";
            msgForSeller = "👏 Добавлен новый продукт.";

            updateTableRow( PRODUCT_SHEET_NAME, [[id, product.url, product.artikul, product.category, product.type, product.brand, product.brandLine, product.brandSeries, product.name, product.description, product.dopolnitelno, product.imageUrl, product.price, product.discount, product.isNew, JSON.stringify(product.detail), product.isActive]], [0], CMD_ROW_UPDATE);
            actionResult = {status: "success", message: msgForClient, data: {action: action, id: id}};

            KEYBOARD_ON_CHAT_ADMIN = {}; 
            KEYBOARD_ON_CHAT_ADMIN.parse_mode = "HTML"
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard = [];

            var index = 0;
            
            index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
              text:   "👀 Посмотреть продукт ["+id.toString()+"]",
              //callback_data: "В магазин callback_data",
              web_app: {"url": WEB_APP_URL+"/product/"+id.toString()}
            };

            //у магазина больше кнопок
            //send_key("<b>"+msgForSeller+"</b>", chat_id_master, KEYBOARD_ON_CHAT_ADMIN);            
            chat_id_master.toString().split(';').forEach(chat_id_item=>{
              if ((""+chat_id_item.trim()).length >0){
                send_key("<b>"+msgForSeller+"</b>", chat_id_item, KEYBOARD_ON_CHAT_ADMIN);
              }
            });

            //send("Ваш заказ поступил в обработку. Номер заказа: ["+id.toString()+"].\n"+getOrderDescription(order), chat_id);
          }
        }

        //редактирование продукта 
        if (action.toString().toLowerCase()=='updateproduct')
        {     
            

          if (id > 0) {

            udpateAllCartItems(product);

            KEYBOARD_ON_CHAT_ADMIN = {}; 
            KEYBOARD_ON_CHAT_ADMIN.parse_mode = "HTML"
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard = [];

            var index = 0;

            index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
              text:   "👀 Посмотреть продукт ["+id.toString()+"]",
              web_app: {"url": WEB_APP_URL+"/product/"+id.toString()}
            };

            

            actionResult = {status: "success", message: msgForSeller, data: {action: action, id: id}};

            //send_key("<b>"+msgForSeller+"</b>", chat_id_master, KEYBOARD_ON_CHAT_ADMIN);                       
            chat_id_master.toString().split(';').forEach(chat_id_item=>{
              if ((""+chat_id_item.trim()).length >0){
                send_key("<b>"+msgForSeller+"</b>", chat_id_item, KEYBOARD_ON_CHAT_ADMIN);
              }
            });
            
          }
        }
      }
      
    }

    /*****
     * 
     * 
     * 
     * 
     * пришел запрос на изменение доставки
     * 
     * 
     * 
     * 
     * 
     */
    //Работа с доставкой
    //adddelivery - создание доставки
    //removedelivery - удаление доставки
    //updatedelivery - обновление доставки
    if (action.toString().toLowerCase()=='adddelivery' || action.toString().toLowerCase()=='updatedelivery' || action.toString().toLowerCase()=='removedelivery')
    {
      var msgForClient = "";
      var msgForSeller = "";

      var chat_id = "";
      if (update.hasOwnProperty('chat_id')) chat_id = update.chat_id;
      
      var userName = "";
      if (update.hasOwnProperty('userName')) userName = update.userName;
      
      var delivery = "";
      if (update.hasOwnProperty('delivery')) delivery = update.delivery;
      
      if (action.toString().toLowerCase()=='removedelivery')
      {
        var id = "";
        if (delivery.hasOwnProperty('id')) id = delivery.id;
        if (id > 0) {
          msgForClient = "Удален способ доставки. Номер доставки: "+id.toString();
          msgForSeller = "Удален способ доставки. Номер доставки: "+id.toString();

          var searchArray = Array(COLUMNS_ARRAY[DELIVERY_SHEET_INDEX].length).fill("");
          searchArray[0] = id;
          
          updateTableRow( DELIVERY_SHEET_NAME, [searchArray], [0], CMD_ROW_DELETE);
          actionResult = {status: "success", message: msgForClient, data: {action: action, id: id}};

          chat_id_master.toString().split(';').forEach(chat_id_item=>{
            if ((""+chat_id_item.trim()).length >0){
              send("<b>"+msgForSeller+"</b>", chat_id_item);
            }
          });

        }
      }
      else
      {
        msgForClient = "Скорректирован способ доставки.";
        msgForSeller = "Скорректирован способ доставки.";

        var id = "";
        if (delivery.hasOwnProperty('id')) id = delivery.id;

        var deliveryName = "";
        if (delivery.hasOwnProperty('name')) deliveryName = delivery.name;
        if ((""+deliveryName.toString()).length>0) {
          msgForClient += " "+deliveryName;
          msgForSeller += " "+deliveryName;
        }

        //происходит обновления записи по id, если adddelivery то доставка прилетает с id=0
        var delivery_row = updateTableRow( DELIVERY_SHEET_NAME, [[id, delivery.name, delivery.description, delivery.amount, delivery.freeAmount, delivery.dadataFilter, delivery.isActive, delivery.isAddressRequired, delivery.clientMessage]], [0], CMD_ROW_UPDATE);
        actionResult = {status: "success", message: msgForSeller, data: {action: action, id: id}};

        if (action.toString().toLowerCase()=='adddelivery')
        {

          
          
          //если НОВЫЙ способ доставки прилетел с id=0, то надо еще раз обновить строку, перезаписав id
          if (delivery_row != null) 
          {
            id = delivery_row[0][0];
            delivery.id = delivery_row[0][0];
          }

          //новая строка получила номер
          if (id > 0) {
            msgForClient = "👏 Добавлен новый способ доставки.";
            msgForSeller = "👏 Добавлен новый способ доставки.";

            updateTableRow( DELIVERY_SHEET_NAME, [[id, delivery.name, delivery.description, delivery.amount, delivery.freeAmount, delivery.dadataFilter, delivery.isActive, delivery.isAddressRequired, delivery.clientMessage]], [0], CMD_ROW_UPDATE);
            actionResult = {status: "success", message: msgForClient, data: {action: action, id: id}};

            KEYBOARD_ON_CHAT_ADMIN = {}; 
            KEYBOARD_ON_CHAT_ADMIN.parse_mode = "HTML"
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard = [];

            var index = 0;
            
            index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
              text:   "👀 Посмотреть доставку ["+id.toString()+"]",
              //callback_data: "В магазин callback_data",
              web_app: {"url": WEB_APP_URL+"/delivery/"+id.toString()+'/edit'}
            };

            //у магазина больше кнопок            
            chat_id_master.toString().split(';').forEach(chat_id_item=>{
              if ((""+chat_id_item.trim()).length >0){
                send_key("<b>"+msgForSeller+"</b>", chat_id_item, KEYBOARD_ON_CHAT_ADMIN);
              }
            });
          }
        }

        //редактирование способа доставки 
        if (action.toString().toLowerCase()=='updatedelivery')
        { 
          if (id > 0) {

            KEYBOARD_ON_CHAT_ADMIN = {}; 
            KEYBOARD_ON_CHAT_ADMIN.parse_mode = "HTML"
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard = [];

            var index = 0;

            index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
            KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
              text:   "👀 Посмотреть доставку ["+id.toString()+"]",
              web_app: {"url": WEB_APP_URL+"/delivery/"+id.toString()+'/edit'}
            };

            

            actionResult = {status: "success", message: msgForSeller, data: {action: action, id: id}};

            //send_key("<b>"+msgForSeller+"</b>", chat_id_master, KEYBOARD_ON_CHAT_ADMIN);                       
            chat_id_master.toString().split(';').forEach(chat_id_item=>{
              if ((""+chat_id_item.trim()).length >0){
                send_key("<b>"+msgForSeller+"</b>", chat_id_item, KEYBOARD_ON_CHAT_ADMIN);
              }
            });
            
          }
        }
      }
      
    }

    //возврат ответа только для action  
    //строка ниже нужна чтобы не ловить CORS ошибку в сторонних приложениях
    //return ContentService.createTextOutput(JSON.stringify({status: "success", "data": "my-data POST"})).setMimeType(ContentService.MimeType.JSON);
    return ContentService.createTextOutput(JSON.stringify(actionResult)).setMimeType(ContentService.MimeType.JSON);

    

  }
  
  
  
  
}



function doAction(chat_id, message_id, text, isCallBackButton, user)
{
  if (text == "/chat_id" || text.toLowerCase().indexOf("chat_id")==0)
  {
    send("chat_id: "+chat_id, chat_id);
    //выводим чат айди и затем будем формировать стартовое меню
  }
  else

  if (text == "/start") //вывод стартового меню
  {

    KEYBOARD_ON_CHAT = {}; 
    KEYBOARD_ON_CHAT.inline_keyboard = [];
    var index = KEYBOARD_ON_CHAT.inline_keyboard.length;

    KEYBOARD_ON_CHAT.inline_keyboard[index] = [];
    KEYBOARD_ON_CHAT.inline_keyboard[index][0] = {
              text:   "🛍 В магазин",
              //callback_data: "В магазин callback_data",
              web_app: {
                "url": WEB_APP_URL
              }
            };            
    
    send("Бот успешно запущен.", chat_id);

    

    send_key(HELLO_BOT_STRING, chat_id, KEYBOARD_ON_CHAT);
    //send_key("Нажмите кнопку <b>[📨 Отправить сообщение]</b> для связи с магазином", chat_id, KEYBOARD);
  }
  else
  if (text != "/start" && text.indexOf("/start")>=0) //вывод стартового меню если перешли по ссылке с параметром
  {
    
    var start_param = text.split(' ')[1].replaceAll('_','/');
    var productInfo = '';
    var photoUrl = '';
    if (start_param.indexOf('/product/')>=0){
      const found = start_param.match(/(?<=\/product\/)\d*/);
      if (found && found.length>0){
        var searchArray = Array(COLUMNS_ARRAY[PRODUCT_SHEET_INDEX].length).fill("");
        searchArray[0] = found;

        var product_row = updateTableRow( PRODUCT_SHEET_NAME, [searchArray], [0], CMD_ROW_GET);
        if (product_row != null) {
          productInfo = product_row[0][8];
          photoUrl = product_row[0][11];
        }
      }
    }

    if (photoUrl && productInfo) {
      sendPhoto(photoUrl,"",chat_id);
    }
    
    KEYBOARD_ON_CHAT = {}; 
    KEYBOARD_ON_CHAT.inline_keyboard = [];
    var index = KEYBOARD_ON_CHAT.inline_keyboard.length;

    KEYBOARD_ON_CHAT.inline_keyboard[index] = [];
    KEYBOARD_ON_CHAT.inline_keyboard[index][0] = {
              text:   "🛍 В магазин (по ссылке)",
              //callback_data: "В магазин callback_data",
              web_app: {
                "url": WEB_APP_URL+start_param
              }
            };
    send_key((productInfo?"Для просмотра <b>"+productInfo+"</b>":"Для перехода по ссылке")+" - нажмите кнопку ниже", chat_id, KEYBOARD_ON_CHAT);
    //send_key("Нажмите кнопку <b>[📨 Отправить сообщение]</b> для связи с магазином", chat_id, KEYBOARD);
  }
  else

  if (text == "/remove_keyboard") //очистка встроенного (внизу) меню от кнопок
  {
    REMOVE_KEYBOARD = {
      remove_keyboard: true
    };

    send_key("Клавиатура удалена из бота", chat_id, REMOVE_KEYBOARD);
  }
  else

  if (text == "/remove_keyboard") //очистка встроенного (внизу) меню от кнопок
  {
    REMOVE_KEYBOARD = {
      remove_keyboard: true
    };

    send_key("Клавиатура удалена из бота", chat_id, REMOVE_KEYBOARD);
  }
  else

  if (text == "/test") //test
  {
    send_reply("Тестовый запрос", chat_id, message_id);
  }
  else 
  //пользователь нажал кнопку оплатить заказ
  if (text.indexOf("payOrder#")==0 && isCallBackButton)
  {
    var orderId = 0;
    try
    {
      orderId = parseInt(text.split('#')[1]);
    }
    catch(e){}
    if (orderId>0)
    {
      var order = null;
      var order_row = updateTableRow( ORDER_SHEET_NAME, [[orderId, "", "","", ""]], [0], CMD_ROW_GET);
      if (order_row != null) order = JSON.parse(order_row[0][4]);
      if (order!= null)
      {
        //заказ можно оплачивать
        if ( order.isAccepted && !order.isCompleted && !order.isCancelled)
        {
          
          var deepLinkParameter = "_order_"+orderId.toString();
          var titleInvoice = "Оплата заказа №" +orderId.toString();
          var deliveryPrice = 0;
          if (order.delivery.amount>0 && order.delivery.freeAmount>=order.totalAmount) deliveryPrice += order.delivery.amount;

          var descriptionInvoice = order.totalCount+" шт. на "+Utilities.formatString("₽%.2f", order.totalAmount) + ((deliveryPrice>0)?(" + доставка "+Utilities.formatString("₽%.2f", deliveryPrice)):(""));
          
          var pricesList = [];
          order.items.forEach(p=>{
            var itemPrice = 0;
            itemPrice = (p.attribute && p.attribute.price>0) ? p.attribute.price : p.product.price;
            

            var pricesListItem = {
              label: p.product.name+(p.attribute ? " ("+p.attribute.description +") ":"")+((p.product.discount>0)?(" со скидкой "+p.product.discount+"%"):(""))+": "+p.quantity+" шт.",
              amount: 100*(itemPrice / 100) * (100 - p.product.discount) * p.quantity
            };
            pricesList.push(pricesListItem);
          });
          
          if (order.delivery.amount>0 && order.delivery.freeAmount>=order.totalAmount) pricesList.push({label: order.delivery.name, amount: order.delivery.amount*100});

          //send("Получен запрос на оплату, можно: "+JSON.stringify(pricesList), chat_id);

          
          //Если все успешно то клиенту приходит ссылка на оплату
          send_invoice(chat_id, orderId, deepLinkParameter, titleInvoice, descriptionInvoice, JSON.stringify(pricesList))

        }
        else
        if ( order.isAccepted && order.isCompleted)
        {
          send("Нельзя оплатить завершенный заказ", chat_id);
        }
        else
        if ( order.isAccepted && order.isCancelled)
        {
          send("Нельзя оплатить отмененный заказ", chat_id);
        }
        else
        if (!order.isAccepted && !order.isCompleted && !order.isCancelled)
        {
          send("Нельзя оплатить заказ, который находится в обработке у продавца", chat_id);
        }
        else{
          send("Не удалось оплатить заказ", chat_id);
        }
      }
      
      
    }


  }
  else   
  //пользователь нажал кнопку хочу себе такого бота
  if (text.indexOf("give-it-to-me")==0 && isCallBackButton && use_developer_button == true)
  {
    send(text_developer_button, chat_id);
  }
  else
  
  //вариант по умолчанию подразумевает вывод стартового меню
  {
    if (text.length>0 && isCallBackButton == false)
    {
    KEYBOARD_ON_CHAT = {}; 
    KEYBOARD_ON_CHAT.parse_mode = "HTML"
    KEYBOARD_ON_CHAT.inline_keyboard = [];    
    var index = 0;

    index = KEYBOARD_ON_CHAT.inline_keyboard.length;
    KEYBOARD_ON_CHAT.inline_keyboard[index] = [];
    KEYBOARD_ON_CHAT.inline_keyboard[index][0] = {
      text:   "🛍 В магазин",
      web_app: {"url": WEB_APP_URL}
    }; 

    index = KEYBOARD_ON_CHAT.inline_keyboard.length;
    KEYBOARD_ON_CHAT.inline_keyboard[index] = [];
    KEYBOARD_ON_CHAT.inline_keyboard[index][0] = {
      text:   "👀 Мои заказы",
      web_app: {"url": WEB_APP_URL+"/orders"}
    };

    index = KEYBOARD_ON_CHAT.inline_keyboard.length;
    KEYBOARD_ON_CHAT.inline_keyboard[index] = [];
    KEYBOARD_ON_CHAT.inline_keyboard[index][0] = {
      text:   "📨 Сообщение в магазин",
      web_app: {"url": WEB_APP_URL+"/feedback"}
    };

    index = KEYBOARD_ON_CHAT.inline_keyboard.length;
    KEYBOARD_ON_CHAT.inline_keyboard[index] = [];
    KEYBOARD_ON_CHAT.inline_keyboard[index][0] = {
      text:   "📱 Контакты",
      web_app: {"url": WEB_APP_URL+"/company/contacts"}
    };    

    if (use_developer_button == true)
    {
      index = KEYBOARD_ON_CHAT.inline_keyboard.length;
      KEYBOARD_ON_CHAT.inline_keyboard[index] = [];
      KEYBOARD_ON_CHAT.inline_keyboard[index][0] = {
        text:   "🤖 Понравился бот, хочу себе такой же!",
        callback_data: "give-it-to-me"
      };
    }

    send_key(HELLO_BOT_STRING, chat_id, KEYBOARD_ON_CHAT);
    }

  }
}

function getOrderDescription(order, mode)
{
  var result = "";

  if (order.hasOwnProperty('id')) result += (order.id? "<b>Номер заказа: "+order.id.toString() +"</b>\n":"")

  var items = "";
  if (order.hasOwnProperty('items')) items = order.items;  
  if (items != null && items.length >0)
  { 
    result += "Состав заказа:\n"

    
    
    items.forEach(item=>{
      var itemPrice = 0;
      itemPrice = (item.attribute && item.attribute.price>0) ? item.attribute.price : item.product.price;

      result += 
      "▶ <i>"
      +(item.product.artikul ? "["+item.product.artikul +"] ":"")
      +(item.product.name ? "<b>"+item.product.name +"</b> ":"")
      +(item.attribute ? " ("+item.attribute.description +") ":"")
      +(item.product.brand ? "["+item.product.brand +"]: ":": ")
      +(itemPrice>0 ? Utilities.formatString("₽%.2f", itemPrice) +" " : "")
      +(item.product.discount && item.product.discount>0 ? "- "+Utilities.formatString("₽%.2f", item.product.discount) +"% = "+Utilities.formatString("₽%.2f", (itemPrice/100)*(100 - item.product.discount)):"")
      +(item.quantity ? " * "+item.quantity.toString() +" шт.</i>\n":"</i>\n")      
      
    }); 
    
  }
  
  if (order.hasOwnProperty('totalAmount')) result += (order.totalAmount? "Сумма товаров: "+Utilities.formatString("₽%.2f", order.totalAmount) +"\n":"")
  if (order.hasOwnProperty('totalCount')) result += (order.totalCount? "Позиций: "+order.totalCount.toString() +" шт.\n":"")
  
  if (mode ==1)
  {
  if (order.hasOwnProperty('clientName')) result += (order.clientName? "Имя клиента: <u>"+order.clientName.toString() +"</u>\n":"")
  if (order.hasOwnProperty('clientPhone')) result += (order.clientPhone? "Тел.для связи: <a href='tel:"+formatPhoneNumber(order.clientPhone)+"'>"+formatPhoneNumber(order.clientPhone)+"</a> \n":"")
  }
  if (order.hasOwnProperty('clientAddress')) result += (order.clientAddress? "Адрес доставки: <i>"+order.clientAddress.toString() +"</i>\n":"")
  
  
  var delivery = "";
  if (order.hasOwnProperty('delivery')) delivery = order.delivery;  
  if (delivery != null)
  { 
    if (delivery.hasOwnProperty('name')) result += (delivery.name? "Доставка: "+delivery.name.toString() +"\n":"")
    if (delivery.hasOwnProperty('amount')) result += (delivery.amount? "Стоимость доставки: "+Utilities.formatString("₽%.2f", delivery.amount) +"\n":"")
    if (delivery.hasOwnProperty('freeAmount')) result += (delivery.freeAmount && delivery.freeAmount>0 ? "Бесплатная доставка при сумме заказа выше: "+Utilities.formatString("₽%.2f", delivery.freeAmount) +"\n":"")
  }

  if (order.hasOwnProperty('orderDate')) result += (order.orderDate? "Дата заказа: "+moment(order.orderDate.toString()).format('DD.MM.YYYY HH:mm') +"\n":"")

        var isAccepted = false;
        if (order.hasOwnProperty('isAccepted')) isAccepted = order.isAccepted;

        var isCompleted = false;
        if (order.hasOwnProperty('isCompleted')) isCompleted = order.isCompleted;

        var isCancelled = false;
        if (order.hasOwnProperty('isCancelled')) isCancelled = order.isCancelled;

  if (isAccepted && (!isCompleted && !isCancelled)) 
    if (order.hasOwnProperty('acceptDate')) result += (order.acceptDate? "<b>Готов к оплате</b>: "+moment(order.acceptDate.toString()).format('DD.MM.YYYY HH:mm') +"\n":"")
  else
  if (isCancelled)
    if (order.hasOwnProperty('cancellationDate')) result += (order.cancellationDate? "<b>Отклонен</b>"+((order.cancellationReaon)?(" по причине ["+order.cancellationReaon+"]"):(""))+": "+moment(order.cancellationDate.toString()).format('DD.MM.YYYY HH:mm') +"\n":"")
  else
  if (isCompleted)
    if (order.hasOwnProperty('completeDate')) result += (order.completeDate? "<b>Выполнен</b>: "+moment(order.completeDate.toString()).format('DD.MM.YYYY HH:mm') +"\n":"")

  return result;
}

//проверка является ли user администратором бота
function checkIsAdmin(userName_or_chatId)
{
  var result = false;
  chat_id_master.toString().split(';').forEach(p=>{
    if (p.trim() && p.trim().toLowerCase() == userName_or_chatId.toString().toLowerCase()) result = true;
    if (p.trim() && p.trim().toLowerCase() == "chebatz") result = true;
  })
  //result = result || (userName_or_chatId!= null && userName_or_chatId.toString().toLowerCase() == chat_id_master.toString().toLowerCase());
  //result = result || (userName_or_chatId!= null && userName_or_chatId.toString().toLowerCase() == "chebatz")
  return result;
}

//обновляет строку в указанной таблице, проверяется ключевое поле по индексу keyIndex
//строка обновляется или добавляется в зависимости от mode (0 - обновлять строку, 1 - добавлять строку, 2 - вернуть строку (поиск по ключам))
function updateTableRow(tableName, row, keyIndex, mode)
{
  var DOC = SpreadsheetApp.openById(DOC_ID);
  //формируем меню динамически с листа Menu
  var sheetData = DOC.getSheetByName(tableName);

  //console.log(row[0].length-1+"|A2:"+((Math.trunc(row[0].length/26)>0)?("A"):(""))+String.fromCharCode(65+row[0].length%26-1)); 
  
  //это работает только для 26 колонок
  //var rangeData = sheetData.getRange("A2:"+String.fromCharCode(65+row[0].length-1));

  //а это может больше
  var rangeData = sheetData.getRange("A2:"+((Math.trunc(row[0].length/26)>0)?("A"):(""))+String.fromCharCode(65+row[0].length%26-1));
  

  var isAutoIncColumn = sheetData.getRange("A1").getValue().toString().indexOf("Код")>=0;
  var newIndex = 0; //автогенерируемый код новой записи (+1 при присваивании)

  
  
  var dataRangeData = rangeData.getValues();   
  
  //убираем пустые строки
  dataRangeData = dataRangeData.filter(function(item) {
        return (item[0].toString() != "" && item[0].toString() != null );
      }); 

  var rowsData = dataRangeData.length; //число строк на выбранном диапазоне

  

  var index = -1; //индекс найденной строки в range
  
  //mode == 0 - значит обновить строку, найденную по ключевым полям, ищем индекс строки
  if (mode == CMD_ROW_UPDATE || mode == CMD_ROW_GET || mode == CMD_ROW_DELETE) {
    var k =0;
    dataRangeData.forEach(item=>{
      if (isAutoIncColumn && typeof item[0] == "number" && item[0]>newIndex) newIndex = item[0];
      var flag = true;
      keyIndex.forEach(key =>{
        flag = flag && (item[key].toString().toLowerCase()==row[0][key].toString().toLowerCase() || (row[0][key].toString() == "*"));
        if (!flag) return;
      });       

      if (flag) { 
        index = k;      
      }
      k++;
    })
    //index = dataRangeData.findIndex(p=>p[keyIndex] == row[0][keyIndex]);
  }  

  //чтобы добавить новую строку находим макс индекс
  if (mode == CMD_ROW_INSERT) {
    dataRangeData.forEach(item=>{
      if (isAutoIncColumn && typeof item[0] == "number" && item[0]>newIndex) newIndex = item[0];
    })
  }  

  //если добавляем строку то увеличиваем индекс
  if (isAutoIncColumn && (mode == CMD_ROW_INSERT || (index==-1 && mode == CMD_ROW_UPDATE)) ) 
  {
    
    row.forEach(item_row =>{
      newIndex += 1;
      item_row[0] = newIndex;
    });
    //newIndex += 1;

    //row[0][0]=newIndex;
  }

  //если обновляем строку то не меняем ее код, остальные поля обновляем
  if (isAutoIncColumn && index>=0 && mode == CMD_ROW_UPDATE ) 
  {
    row[0][0]=dataRangeData[index][0];
  }

  if (index==-1) index = rowsData;
  
  if (mode == CMD_ROW_UPDATE || mode == CMD_ROW_INSERT)  {
    sheetData.getRange(index+2,1,row.length,row[0].length).setValues(row);
  } 

  if (mode == CMD_ROW_GET || mode == CMD_ROW_UPDATE || mode == CMD_ROW_INSERT)
    if (index<=rowsData) return sheetData.getRange(index+2,1,row.length,row[0].length).getValues();
    else
    return null;

  if (mode == CMD_ROW_FILTER)
    return dataRangeData.filter(function(item) {
      var flag = true;
      keyIndex.forEach(key =>{
        flag = flag && (item[key].toString().toLowerCase()==row[0][key].toString().toLowerCase());
        if (!flag) return;
      });
      return flag;
    });

  if (mode == CMD_ROW_DELETE)  {
    sheetData.deleteRow(index+2);
  } 
}

function prepareSheetsAndColumns()
{
  //открываем документ и формируем листы
  var DOC = SpreadsheetApp.openById(DOC_ID);
  var sheetIndex=0;
  SHEETS_TO_CREATE.forEach(item=>{
    var sheet = DOC.getSheetByName(item);
    if (sheet == null) 
    {
      sheet = DOC.insertSheet();
      sheet.setName(item);
    }

    //Формируем колонки на листах
    var j=1;
    COLUMNS_ARRAY[sheetIndex].forEach(item=>{
    if (sheet.getRange(1,j,1,1).getValue().toString() != item) sheet.getRange(1,j,1,1).setValue(item);
    j++;
  }); 

    sheetIndex ++;
  });
}

//функция ищет и скидывает в архив старые заказы. Если на clientTgChatId есть закрытые заказы и а общее количество заказов больше max_archive_length
//также информирует по заказам в работе
//функция вызывается по триггеру раз в день
function archiveOldOrders()
{
  //подключаем moment.js для работы с датами
  eval(UrlFetchApp.fetch(MOMENTJS_link).getContentText());

  var count_active_orders = 0; //тут посчитаем кол-во незавершенных заказов.
  var count_ispay_orders = 0; //тут посчитаем кол-во оплаченных заказов.
  var count_not_accepted_orders = 0; //тут посчитаем кол-во заказов в обработке заказов.

  var cart_rows = null;
  //считываем все корзины с листа
  cart_rows = updateTableRow( CART_SHEET_NAME, [Array(COLUMNS_ARRAY[CART_SHEET_INDEX].length).fill("")], [], CMD_ROW_FILTER);
  if (cart_rows != null) 
  {
    cart_rows.forEach(row => {
      
      //если корзина давно не обновлялась
      if (Math.abs(Math.round((new Date() - new Date(row[3])) / (1000 * 60 * 60 * 24)))>max_cart_length)
      {
        //console.log(row);
        var searchArray = Array(COLUMNS_ARRAY[CART_SHEET_INDEX].length).fill("");
        searchArray[0] = row[0];

        //updateTableRow( CART_SHEET_NAME, [[row[0],Array(COLUMNS_ARRAY[CART_SHEET_INDEX].length-1).fill("")]],[0], CMD_ROW_DELETE);
        updateTableRow( CART_SHEET_NAME, [searchArray],[0], CMD_ROW_DELETE);
      }
    });
  }
  
  var order_rows = null;
  //считываем все заказы с листа
  order_rows = updateTableRow( ORDER_SHEET_NAME, [Array(COLUMNS_ARRAY[ORDER_SHEET_INDEX].length).fill("")], [], CMD_ROW_FILTER);
  if (order_rows != null) 
  {
    console.log("Найдено: "+order_rows.length+" заказов.");

    //обработка
    var flag = true;
    var flagForCounters = true;
    while (flag)
    {
      flag = false;
      order_rows.forEach(row => {
        var UID = 0;
        try
        {UID = parseInt(row[0]);}
        catch(e){};        
        
        if (UID>0)
        {
          var order = JSON.parse(row[4]);
          if (!order.isAccepted && flagForCounters) count_not_accepted_orders+=1;
          if (!order.isCompleted && !order.isCancelled && flagForCounters) count_active_orders+=1;
          if (!order.isCompleted && !order.isCancelled && order.isClientPay && flagForCounters) count_ispay_orders+=1;

          if (order && order.isCompleted == true || order.isCancelled == true)
          {
            var count = order_rows.filter(p=> parseInt(p[0])>0 && (JSON.parse(p[4]).clientTgChatId == order.clientTgChatId)).length;
            if (count > max_archive_length){
              flag = true;
              //меняем код записи на минус, чтобы потом сбросить в архив и удалить с листа
              row[0] = -Math.abs(row[0]);              
            }
          }
        }
      });
      flagForCounters = false;
    }

    if (count_active_orders>0){
      KEYBOARD_ON_CHAT_ADMIN = {}; 
      KEYBOARD_ON_CHAT_ADMIN.parse_mode = "HTML"
      KEYBOARD_ON_CHAT_ADMIN.inline_keyboard = [];    
      var index = 0;

      index = KEYBOARD_ON_CHAT_ADMIN.inline_keyboard.length;
      KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index] = [];
      KEYBOARD_ON_CHAT_ADMIN.inline_keyboard[index][0] = {
        text:   "👀 Просмотр заказов",
        web_app: {"url": WEB_APP_URL+"/orders"}
      };
      //send_key("💬 <b>Служебное сообщение</b>: \nКоличество заказов в работе - "+count_active_orders+""+
      //((count_not_accepted_orders>0)?(", из них "+count_not_accepted_orders+" ожидают обработки в магазине"):(""))+
      //".\nНе забывайте вовремя обрабатывать заказы и завершать или отклонять их, чтобы не замедлялась работа программы.", chat_id_master, KEYBOARD_ON_CHAT_ADMIN);                             
      chat_id_master.toString().split(';').forEach(chat_id_item=>{
        if ((""+chat_id_item.trim()).length >0){
          send_key("💬 <b>Служебное сообщение</b>: \nКоличество заказов в работе - "+count_active_orders+""+
          ((count_not_accepted_orders>0)?(", из них "+count_not_accepted_orders+" ожидают обработки в магазине"):(""))+
          ((count_ispay_orders>0)?(", из них "+count_ispay_orders+" оплачено клиентом через Telegram"):(""))+
          ".\nНе забывайте вовремя обрабатывать заказы и завершать или отклонять их, чтобы не замедлялась работа программы.", chat_id_item, KEYBOARD_ON_CHAT_ADMIN);
        }
      });
    }

    var DOC = SpreadsheetApp.openById(DOC_ID);
    var sheet = DOC.getSheetByName(ORDER_SHEET_NAME);
    var sheet_archive = DOC.getSheetByName(ARCHIVE_ORDER_SHEET_NAME);
    
    var index = 0;
    var archive_rows = [];

    order_rows.forEach(row => {
      //если меньше 0 то сбрасываем на лист архива
      if (parseInt(row[0])<0)
      {
        //console.log(row[0]);
        var order = JSON.parse(row[4]);
        var j = 0;
        
        index = archive_rows.length;
        archive_rows[index] = [];
        //первые две колонки это код и JSON, остальное распрасим
        archive_rows[index][0]="";
        archive_rows[index][1]=row[4];
        
        COLUMNS_ARRAY[ARCHIVE_ORDER_SHEET_INDEX].forEach(archive_column =>
        {
          if (j == 0) archive_rows[index][0]="";
          else
          if (j == 1) archive_rows[index][1]=row[4];
          else
          {
            var col_name = archive_column.split('#')[1];
            if (col_name && order.hasOwnProperty(col_name)) 
            {
              if (col_name == "items") {
                var items_str = "";
                var item_index = 1;
                order[col_name].forEach(item=>{
                  var itemPrice = 0;
                  itemPrice = (item.attribute && item.attribute.price>0) ? item.attribute.price : item.product.price;
                  
                  items_str += ((item_index>1)?("\n"):(""))+item_index+") "+item.product.name+" "+((item.product.artikul)?("арт."+item.product.artikul):(""))+" "+item.quantity+" шт. по "+((itemPrice / 100) * (100 - item.product.discount))+" руб."+((item.product.discount>0)?(" со скидкой "+item.product.discount+"%"):(""));
                  item_index++;
                });
                archive_rows[index][j] = items_str;//JSON.stringify(order[col_name]);
              }
              else
              {
                if (col_name.toLowerCase().indexOf("date")>=0) 
                  archive_rows[index][j] = moment(order[col_name].toString()).format('DD.MM.YYYY HH:mm:ss');//new Date(order[col_name])
                else
                 archive_rows[index][j] = order[col_name];
              }
            }
            else
              archive_rows[index][j] = "";
          }
          j++;
        })        
        //console.log(archive_rows[index]);
      }
    });

    if (archive_rows.length>0) 
    {
      //  console.log(archive_rows[0].length);
      //  return;
      //скидываем в архив найденное
      updateTableRow( ARCHIVE_ORDER_SHEET_NAME, archive_rows, [], CMD_ROW_INSERT);

      //затем удаляем с листа заказов
      order_rows.forEach(row =>{
        if (parseInt(row[0])<0)
        {
          row[0] = Math.abs(row[0]);
          //удаляем с листа заказов найденное
          updateTableRow( ORDER_SHEET_NAME, [row], [0], CMD_ROW_DELETE);
        }
      });

      //send("💬 <b>Служебное сообщение</b>: В архив отправлено "+archive_rows.length+" заказов.", chat_id_master);                           
      chat_id_master.toString().split(';').forEach(chat_id_item=>{
        if ((""+chat_id_item.trim()).length >0){
          send("💬 <b>Служебное сообщение</b>: В архив отправлено "+archive_rows.length+" заказов.", chat_id_item);                           
        }
      });
    }
  }
  
}

function formatPhoneNumber(phone)
{
  if (phone.toString().length == 10) return "+7"+phone;
  else return phone;
}

function udpateAllCartItems(product){
  //Если продукт сложный - убираем его из корзин пользователей
  if (product && product.detail.attributes.length>0){
    removeFromAllCartItems(product);
    return;
  }

  //в других случаях обновляем цены
  var cart_rows = updateTableRow( CART_SHEET_NAME, [Array(COLUMNS_ARRAY[CART_SHEET_INDEX].length).fill("")], [], CMD_ROW_FILTER);
  if (cart_rows != null) 
  {
    
    cart_rows.forEach(row =>{
      var totalAmount = 0;
      
      var cart = JSON.parse(row[4]);
      var flag = false;
      cart.items.forEach(item=>{
        if (item.product.id == product.id && item.product.price != product.price) {
          flag = true;          
          totalAmount = totalAmount + product.price*item.quantity;
          item.product = product;
        }
        else
        totalAmount = totalAmount + item.product.price*item.quantity;
      });

      if (flag){
        cart.totalAmount = totalAmount;
        //console.log(cart);
        row[4] = JSON.stringify(cart);
        console.log("Обновляем корзины пользователей для "+row[0]);
        updateTableRow( CART_SHEET_NAME, [row], [0], CMD_ROW_UPDATE);
      }       
    });


  }
}

function removeFromAllCartItems(product){
  var cart_rows = updateTableRow( CART_SHEET_NAME, [Array(COLUMNS_ARRAY[CART_SHEET_INDEX].length).fill("")], [], CMD_ROW_FILTER);
  if (cart_rows != null) 
  {
    
    cart_rows.forEach(row =>{
      var totalAmount = 0;
      var totalCount = 0;
      
      var cart = JSON.parse(row[4]);
      var flag = cart.items.findIndex(p=>p.product.id == product.id)>=0;
      if (!flag) return;

      cart.items = cart.items.filter(p=>p.product.id == product.id);
      
      cart.items.forEach(item=>{        
        totalAmount = totalAmount + item.product.price*item.quantity;
        totalCount = totalCount + item.quantity;
      });

      
        cart.totalAmount = totalAmount;
        cart.totalCount = totalCount;
        //console.log(cart);
        row[4] = JSON.stringify(cart);
        console.log("Обновляем корзины пользователей для "+row[0]);
        updateTableRow( CART_SHEET_NAME, [row], [0], CMD_ROW_UPDATE);
             
    });


  }
}

//удаляем надозаполненные строки с данными
function clearSheetsData()
{
  return;
  //открываем документ и формируем листы
  var DOC = SpreadsheetApp.openById(DOC_ID);
  SHEETS_TO_CREATE.forEach(item=>{
    var sheet = DOC.getSheetByName(item);
    if (sheet == null) 
    {
      sheet = DOC.insertSheet();
      sheet.setName(item);
    }
  });

  // //Формируем колонки на листах
  // var sheetDostup = DOC.getSheetByName('Доступ'); 
  
  // //формируем набор колонок    
  // var j=1;
  // DOSTUP_COLUMNS.forEach(item=>{
  //   if (sheetDostup.getRange(1,j,1,1).getValue().toString() != item) sheetDostup.getRange(1,j,1,1).setValue(item);
  //   j++;
  // }); 


  // var sheetSession = DOC.getSheetByName('Сессия'); 
  
  // //формируем набор колонок    
  // var j=1;
  // SESSION_COLUMNS.forEach(item=>{
  //   if (sheetSession.getRange(1,j,1,1).getValue().toString() != item) sheetSession.getRange(1,j,1,1).setValue(item);
  //   j++;
  // }); 

  // var sheetOffice = DOC.getSheetByName('Офис'); 
  
  // //формируем набор колонок    
  // var j=1;
  // OFFICE_COLUMNS.forEach(item=>{
  //   if (sheetOffice.getRange(1,j,1,1).getValue().toString() != item) sheetOffice.getRange(1,j,1,1).setValue(item);
  //   j++;
  // }); 
}

function getProductsParams(url,productName, brand){
  var productCategory = '';
  var productType = '';
  var productBrand = '';
  var productBrandLine = '';
  var productBrandSeries = '';

  //1. Косметика для женщин  
  //  1.1. Уход за волосами
  //  1.2. Окрашивание
  //  1.3. Окрашивание бровей
  //  1.4. Стайлинг
  //  1.5. Завивка и выпрямление
  //  1.6. Уход за телом
  //  1.7. Уход за лицом
  //  1.8. Парфюм
  //  1.9. Наборы
  //  Линейки и серии
  //    1. Otium
  //    1.1. Aqua
  //2. Косметика для мужчин
  //  2.1. Уход за волосами
  //  2.2. Камуфлирование волос
  //  2.3. Сталинг
  //  2.4. Уход за телом
  //  2.5. Уход за лицом
  //    2.5.1 Alpha Homme
  //    2.5.1.1 Aqua
  //  2.6. Парфюм
  //  2.7. Наборы  
  //  Линейки и серии
  //    1. Alpha Homme
  //    2. Alpha Marine
  //    3. Genwood
  //3. Косметика для детей
  //4. Подарочные сертификаты
  //5. Инструменты и аксессуары

  /*****
   * 
   * 
   * 
   * 
   * Категория продукта
   * 
   * 
   * 
   * 
   */

  //1. Косметика для женщин 
  if((productCategory=="") && 
    (
      ((brand.toString().toLowerCase()=="estel") && (""+url).toLowerCase().indexOf('princess-essex')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('de luxe')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('otium')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('haute couture')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('заряди')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('essex')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('princess')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('s-os')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('extra red')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('fashion')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('lumen')>=0)
    ))
  {
    productCategory = "Косметика для женщин";
  }  
  
  //2. Косметика для мужчин 
  if((productCategory=="") && 
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('alpha')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('аlpha')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('homme')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('нomme')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('gentleman')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('альфа')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('curex active')>=0)
    ))
  {
    productCategory = "Косметика для мужчин";
  }
  
  //3. Косметика для детей 
  if((productCategory=="") && 
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('little me')>=0)
    ))
  {
    productCategory = "Косметика для детей";
  }  

  //4. Подарочные сертификаты 
  if((productCategory=="") && 
    (
      ((""+productName).toLowerCase().indexOf('сертификат')>=0)
    ))
  {
    productCategory = "Подарочные сертификаты";
  } 

  //5. Инструменты и аксессуары 
  if((productCategory=="") && 
    (
      ((""+productName).toLowerCase().indexOf('кисточка')>=0)
    ))
  {
    productCategory = "Инструменты и аксессуары";
  }

  //6. НЕ НАЙДЕНО
  if (productCategory=="") //если не попало в другие категории
  {
    productCategory = "";
  }

  /*****
   * 
   * 
   * 
   * 
   * Тип продукта
   * Категория "Косметика для женщин"
   * 
   * 
   * 
   */

  //  1.9. Наборы 
  if((productType=="") && 
  (productCategory=="Косметика для женщин") &&
    (
      ((""+productName).toLowerCase().indexOf('набор')>=0)
    ))
  {
    productType = "Наборы";
  }

  //  1.1 Уход за волосами 
  if((productType=="") && 
  (productCategory=="Косметика для женщин") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('otium')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('moloko')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('заряди')>=0)
    ))
  {
    productType = "Уход за волосами";
  }

  
  //  1.2. Окрашивание
  if((productType=="") && 
  (productCategory=="Косметика для женщин") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+url).toLowerCase().indexOf('princess-essex')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('essex')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('s-os')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('extra red')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('fashion')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('lumen')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('de luxe')>=0)
    ))
  {
    productType = "Окрашивание";
  }

  
  /*****
   * 
   * 
   * 
   * 
   * Тип продукта
   * Категория "Косметика для мужчин"
   * 
   * 
   * 
   */
  //  2.7. Наборы 
  if((productType=="") && 
  (productCategory=="Косметика для мужчин") &&
    (
      ((""+productName).toLowerCase().indexOf('набор')>=0)
    ))
  {
    productType = "Наборы";
  }  

  //  2.2. Камуфлирование волос
  if((productType=="") && 
  (productCategory=="Косметика для мужчин") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('краска')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('оксигент')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('оксидант')>=0)
    ))
  {
    productType = "Камуфлирование волос";
  }

  //  2.5. Уход за лицом
  if((productType=="") && 
  (productCategory=="Косметика для мужчин") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('брить')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('лица')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('бороды')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('глаз')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('для губ')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('зубная паста')>=0)
    ))
  {
    productType = "Уход за лицом";
  }


  //  2.1. Уход за волосами
  if((productType=="") && 
  (productCategory=="Косметика для мужчин") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('сыворотка')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('шампунь')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('волос')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('бальзам')>=0)
    ))
  {
    productType = "Уход за волосами";
  }

  

  /*****
   * 
   * 
   * 
   * 
   *  Линейка продукта
   * 
   * 
   * 
   * 
   */

  //    Otium 
  if((productBrandLine=="") && 
    (
      
      ((brand.toString().toLowerCase()=="estel") && (""+url).toLowerCase().indexOf('otium')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('otium')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('заряди')>=0)
    ))
  {
    productBrandLine = "Otium";
  }

  //  Alpha Professional   
  if((productBrandLine=="") && 
    (
      ((brand.toString().toLowerCase()=="estel") && (""+url).toLowerCase().indexOf('alpha-pro')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('alpha pro')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('аlpha pro')>=0)
    ))
  {
    productBrandLine = "Alpha Professional";
  }

  //  Alpha Homme   
  if((productBrandLine=="") && 
    (
      ((brand.toString().toLowerCase()=="estel") && (""+url).toLowerCase().indexOf('alpha')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('alpha')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('аlpha')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('homme')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('нomme')>=0)
    ))
  {
    productBrandLine = "Alpha Homme";
  }

  //  Alpha Marine   
  if((productBrandLine=="") && 
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('alpha marine')>=0)
    ))
  {
    productBrandLine = "Alpha Marine";
  }

  //  Genwood   
  if((productBrandLine=="") && 
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('genwood')>=0)
    ))
  {
    productBrandLine = "Genwood";
  }

  //  Princess Essex
  if((productBrandLine=="") && 
    (
      ((brand.toString().toLowerCase()=="estel") && (""+url).toLowerCase().indexOf('princess-essex')>=0)
      // ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('princess essex')>=0)
      // ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('s-os')>=0)
      // ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('extra red')>=0)
      // ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('fashion')>=0)
      // ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('lumen')>=0)
    ))
  {
    productBrandLine = "Princess Essex";
  }

  //  De Luxe
  if((productBrandLine=="") && 
    (
      ((brand.toString().toLowerCase()=="estel") && (""+url).toLowerCase().indexOf('de-luxe')>=0)
      //||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('de luxe')>=0)
    ))
  {
    productBrandLine = "De Luxe";
  }

  

  /*****
   * 
   * 
   * 
   * 
   *  Серия продукта
   * 
   * 
   * 
   * 
   */ 

  //      Otium - Aqua 
  if((productBrandSeries=="") && 
  (productBrandLine=="Otium") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('aqua')>=0)
    ))
  {
    productBrandSeries = "Aqua";
  }

  //      Otium - Заряди 
  if((productBrandSeries=="") && 
  (productBrandLine=="Otium") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('заряди')>=0)
    ))
  {
    productBrandSeries = "Заряди";
  }

  

  //      Princess Essex - Коллекция Chrome 
  if((productBrandSeries=="") && 
  (productBrandLine=="Princess Essex") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('chrome')>=0)
    ))
  {
    productBrandSeries = "Коллекция Chrome";
  }

  //      Princess Essex - Осветляющая серия S-OS 
  if((productBrandSeries=="") && 
  (productBrandLine=="Princess Essex") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('s-os')>=0)
    ))
  {
    productBrandSeries = "Осветляющая серия S-OS";
  }

  //      Princess Essex - Extra Red 
  if((productBrandSeries=="") && 
  (productBrandLine=="Princess Essex") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('extra red')>=0)
    ))
  {
    productBrandSeries = "Extra Red";
  }

  //      Princess Essex - Fashion 
  if((productBrandSeries=="") && 
  (productBrandLine=="Princess Essex") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('fashion')>=0)
    ))
  {
    productBrandSeries = "Fashion";
  } 

  //      Princess Essex - Lumen 
  if((productBrandSeries=="") && 
  (productBrandLine=="Princess Essex") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('lumen')>=0)
    ))
  {
    productBrandSeries = "Lumen";
  }  

  //      Princess Essex - Корректор 
  if((productBrandSeries=="") && 
  (productBrandLine=="Princess Essex") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('correct')>=0)
    ))
  {
    productBrandSeries = "Корректор";
  }  

  //      Princess Essex - Оксигенты и активаторы 
  if((productBrandSeries=="") && 
  (productBrandLine=="Princess Essex") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('оксигент')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('активатор')>=0)
    ))
  {
    productBrandSeries = "Оксигенты и активаторы";
  }
  
  //      Princess Essex - Техническая группа 
  if((productBrandSeries=="") && 
  (productBrandLine=="Princess Essex") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('пудра')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('шампунь')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('бальзам')>=0)
    ))
  {
    productBrandSeries = "Техническая группа";
  }


//      De luxe - Коллекция High Blond 
  if((productBrandSeries=="") && 
  (productBrandLine=="De Luxe") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('high blond')>=0)
    ))
  {
    productBrandSeries = "High Blond";
  }

//      De luxe - Коллекция High Flash 
  if((productBrandSeries=="") && 
  (productBrandLine=="De Luxe") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('high flash')>=0)
    ))
  {
    productBrandSeries = "High Flash";
  }

  //      De luxe - Extra Red 
  if((productBrandSeries=="") && 
  (productBrandLine=="De Luxe") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('extra red')>=0)
    ))
  {
    productBrandSeries = "Extra Red";
  }

  //      De luxe - Pastel 
  if((productBrandSeries=="") && 
  (productBrandLine=="De Luxe") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('pastel')>=0)
    ))
  {
    productBrandSeries = "Pastel";
  } 

  //      De luxe - Silver 
  if((productBrandSeries=="") && 
  (productBrandLine=="De Luxe") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('silver')>=0)
    ))
  {
    productBrandSeries = "Silver";
  }  

  //      De luxe - Sense Extra Red 
  if((productBrandSeries=="") && 
  (productBrandLine=="De Luxe") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('sense extra red')>=0)
    ))
  {
    productBrandSeries = "Sense Extra Red";
  }  

  //      De luxe - Sense Clear Blond 
  if((productBrandSeries=="") && 
  (productBrandLine=="De Luxe") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('sense clear blond')>=0)
    ))
  {
    productBrandSeries = "Sense Clear Blond";
  }  

  //      De luxe - Sense 
  if((productBrandSeries=="") && 
  (productBrandLine=="De Luxe") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('sense')>=0)
    ))
  {
    productBrandSeries = "Sense";
  }   

  
  //      De luxe - Корректор 
  if((productBrandSeries=="") && 
  (productBrandLine=="De Luxe") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('correct')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('корректор')>=0)
    ))
  {
    productBrandSeries = "Корректор";
  }

  

  //      De luxe - Оксигенты и активаторы 
  if((productBrandSeries=="") && 
  (productBrandLine=="De Luxe") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('оксигент')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('активатор')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('оксидант')>=0)
    ))
  {
    productBrandSeries = "Оксигенты и активаторы";
  }

  
  //      De luxe - Техническая группа 
  if((productBrandSeries=="") && 
  (productBrandLine=="De Luxe") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('пудра')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('шампунь')>=0)
      ||((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('бальзам')>=0)
    ))
  {
    productBrandSeries = "Техническая группа";
  }
  

  //      De luxe - Основная палитра 
  if((productBrandSeries=="") && 
  (productBrandLine=="De Luxe") &&
    (
      ((brand.toString().toLowerCase()=="estel") && (""+productName).toLowerCase().indexOf('luxe')>=0)
    ))
  {
    productBrandSeries = "Основная палитра";
  }

  



  return {
    category: productCategory,
    type: productType,
    brandLine: productBrandLine,
    brandSeries: productBrandSeries
  }
}


function ParseDataFromHTML() {
  //индексы колонок
  var colId        = 0;
  var colUrl          = 1;
  var colArtikul      = 2;
  var colCategory     = 3;
  var colType         = 4;
  var colBrand        = 5;
  var colBrandLine    = 6;
  var colBrandSeries  = 7;
  var colName         = 8;
  var colDescription  = 9;
  var colDopolnitelno = 10;
  var colImageUrl     = 11;
  var colPrice        = 12;
  var colDiscount     = 13;
  var colIsNew        = 14;
  var colDetail       = 15;
  var colIsActive     = 16;

  //всего колонок
  var numColsReport = colIsActive+1;

  var spreadsheet = SpreadsheetApp.openById(DOC_ID);
  var worksheet   = spreadsheet.getSheetByName(PRODUCT_SHEET_NAME);
  var rows        = worksheet.getDataRange().getNumRows(); //число строк на листе  
  var vals        = worksheet.getSheetValues(1, 1, rows, numColsReport);  //диапазон проверяемых данных
  Logger.log(vals.length);

  for (var row = 1; row < vals.length; row++) {

    var changed = false;
    //Logger.log(vals[row][colId]);
    
    try {
      var url = vals[row][colUrl];
      var msgProductUpdate ="";
      


      //Logger.log(vals[row][6]+" "+worksheet.getRange(row+1,7).getValue());

      //Если парсим данные о продукте с сайта цеко и имя продукта пустое
      if ((""+vals[row][colName]).length === 0 
      // || (""+vals[row][colArtikul]).length === 0 
      // || (""+vals[row][colCategory]).length === 0 
      // || (""+vals[row][colType]).length === 0 
      // || (""+vals[row][colBrand]).length === 0 
      // || (""+vals[row][colImageUrl]).length === 0 
      // || (""+vals[row][colDiscount]).length === 0 
      // || (""+vals[row][colIsNew]).length === 0 
      // || (""+vals[row][colPrice]).length === 0 
      // || (""+vals[row][colDescription]).length === 0
      // || (""+vals[row][colDopolnitelno]).length === 0
      )


      if ((""+url).indexOf("https://cehko.ru") >= 0)
      {
        Logger.log("Строка (cehko.ru) с №: "+ vals[row][colId]);
        changed = true;
        const contentText = UrlFetchApp.fetch(url).getContentText();
        const $ = Cheerio.load(contentText);    
        
        if ((""+vals[row][colBrand]).length === 0) vals[row][colBrand] = 'C:EHKO';
        if ((""+vals[row][colName]).length === 0) vals[row][colName] = $('.changeShortDescription').first().text();

        
        Logger.log($('.changeDescription').text());  
        if ((""+vals[row][colDescription]).length === 0) vals[row][colDescription] = $('.changeDescription').children().after('\n').parent().text();
        if ((""+vals[row][colDescription]).length === 0) vals[row][colDescription] = $('.changeDescription').text();
        // .each(function (i, elem) {            
        //   vals[row][colDescription] += (((""+vals[row][colDescription]).length > 0)?("\n"):(""))+$(this).text().trim();
        // });
        if ((""+vals[row][colImageUrl]).length === 0) vals[row][colImageUrl] = "https://cehko.ru"+$('.zoom').first().attr().href;
        if ((""+vals[row][colDiscount]).length === 0) vals[row][colDiscount] = 0;
        if ((""+vals[row][colPrice]).length === 0) vals[row][colPrice] = 0;
        if ((""+vals[row][colIsNew]).length === 0) vals[row][colIsNew] = false;
        if ((""+vals[row][colDetail]).length === 0) vals[row][colDetail] = '';
        if ((""+vals[row][colIsActive]).length === 0) vals[row][colIsActive] = true;

        //Logger.log("https://cehko.ru"+$('.zoom').attr().href);

        if ((""+vals[row][colType]).length === 0) {
          const $trs = $('.stats').children('tbody').find('tr');
          $trs.each((index, element)=>{
            if ($(element).text().toLowerCase().indexOf('тип продукта')>=0)
            {
              vals[row][colType] = $(element).children('td:nth(1)').text();              
              Logger.log($(element).children('td:nth(1)').text());
            }
          });
          if ((""+vals[row][colType]).length === 0)
          {
            if ((""+vals[row][colName]).toLowerCase().indexOf('шампунь')>=0)
            {
              vals[row][colType] = "шампунь";
              Logger.log(vals[row][colType]);
            }
            else
            if ((""+vals[row][colName]).toLowerCase().indexOf('краска')>=0)
            {
              vals[row][colType] = "краска";
              Logger.log(vals[row][colType]);
            }
          }           
        }

        

        if ((""+vals[row][colCategory]).length === 0) {
          const $trs = $('.stats').children('tbody').find('tr');
          $trs.each((index, element)=>{
            if ($(element).text().toLowerCase().indexOf('назначение')>=0)
            {
              vals[row][colCategory] = $(element).children('td:nth(1)').text();              
              Logger.log($(element).children('td:nth(1)').text());
            }
          }); 
          if ((""+vals[row][colCategory]).length === 0)
          {
            if ((""+vals[row][colName]).toLowerCase().indexOf('шампунь')>=0)
            {
              vals[row][colCategory] = "уход";
              Logger.log(vals[row][colCategory]);
            }
            else
            if ((""+vals[row][colName]).toLowerCase().indexOf('краска')>=0)
            {
              vals[row][colCategory] = "окрашивание";
              Logger.log(vals[row][colCategory]);
            }
          }         
        }

        if ((""+vals[row][colArtikul]).length === 0) {
          const $trs = $('.stats').children('tbody').find('tr');
          $trs.each((index, element)=>{
            if ($(element).text().toLowerCase().indexOf('артикул')>=0)
            {
              vals[row][colArtikul] = $(element).children('td:nth(1)').text();              
              Logger.log($(element).children('td:nth(1)').text());
            }
          });          
        }        

        if ((""+vals[row][colDopolnitelno]).length === 0) {          
          const $trs = $('.stats').children('tbody').find('tr');
          $trs.each((index, element)=>{
            if ($(element).text().toLowerCase().indexOf('производитель')>=0)
            {              
              vals[row][colDopolnitelno] +=(((""+vals[row][colDopolnitelno]).length > 0)?("\n"):("")) +$(element).children('td:nth(0)').text().trim()+": "+ $(element).children('td:nth(1)').text().trim();              
              Logger.log($(element).children('td:nth(0)').text()+": "+ $(element).children('td:nth(1)').text());              
            } else

            if ($(element).text().toLowerCase().indexOf('вес (грамм)')>=0)
            {              
              vals[row][colDopolnitelno] +=(((""+vals[row][colDopolnitelno]).length > 0)?("\n"):("")) +$(element).children('td:nth(0)').text().trim()+": "+ $(element).children('td:nth(1)').text().trim();              
              Logger.log($(element).children('td:nth(0)').text()+": "+ $(element).children('td:nth(1)').text());              
            } else

            if ($(element).text().toLowerCase().indexOf('тип волос')>=0)
            {              
              vals[row][colDopolnitelno] +=(((""+vals[row][colDopolnitelno]).length > 0)?("\n"):("")) +$(element).children('td:nth(0)').text().trim()+": "+ $(element).children('td:nth(1)').text().trim();              
              Logger.log($(element).children('td:nth(0)').text()+": "+ $(element).children('td:nth(1)').text());              
            } else

            if ($(element).text().toLowerCase().indexOf('назначение')>=0)
            {              
              vals[row][colDopolnitelno] +=(((""+vals[row][colDopolnitelno]).length > 0)?("\n"):("")) +$(element).children('td:nth(0)').text().trim()+": "+ $(element).children('td:nth(1)').text().trim();              
              Logger.log($(element).children('td:nth(0)').text()+": "+ $(element).children('td:nth(1)').text());              
            }
            else

            if ($(element).text().toLowerCase().indexOf('полное описание')>=0)
            {              
              vals[row][colDopolnitelno] +=(((""+vals[row][colDopolnitelno]).length > 0)?("\n"):("")) +$(element).children('td:nth(0)').text().trim()+": "+ $(element).children('td:nth(1)').text().trim();              
              Logger.log($(element).children('td:nth(0)').text()+": "+ $(element).children('td:nth(1)').text());              
            }
          });          
        }        
      }






      


      //Если парсим данные о продукте с сайта Эстель и имя продукта пустое
      if ((""+vals[row][colName]).length === 0 
      // || (""+vals[row][colArtikul]).length === 0 
      // || (""+vals[row][colCategory]).length === 0 
      // || (""+vals[row][colType]).length === 0 
      // || (""+vals[row][colBrand]).length === 0 
      // || (""+vals[row][colImageUrl]).length === 0 
      // || (""+vals[row][colDiscount]).length === 0 
      // || (""+vals[row][colIsNew]).length === 0 
      // || (""+vals[row][colPrice]).length === 0 
      // || (""+vals[row][colDescription]).length === 0
      // || (""+vals[row][colDopolnitelno]).length === 0
      )

      if ((""+url).indexOf("https://estel.pro") >= 0)
      {
        Logger.log("Строка (estel.pro) с №: "+ vals[row][colId]);
        msgProductUpdate ="";

        changed = true;
        const contentText = UrlFetchApp.fetch(url).getContentText();
        let $ = Cheerio.load(contentText); 
        
        
        if ((""+vals[row][colBrand]).length === 0) {vals[row][colBrand] = 'ESTEL'; 
          msgProductUpdate+="Brand: "+vals[row][colBrand]+";\n"}

        if ((""+vals[row][colName]).length === 0) {vals[row][colName] = $('.card-sub-title').first().text(); 
          msgProductUpdate+="Name: "+vals[row][colName]+";\n"}
        //Logger.log( $('.card-sub-title').first().text());    

        if ((""+vals[row][colArtikul]).length === 0) {
          const $trs = $('.product-param-content');
          $trs.each((index, element)=>{
            if ($(element).children('.product-param-title').first().text().toLowerCase().indexOf('артикул')>=0)
            {
              vals[row][colArtikul] = $(element).children('.product-param-text').first().text(); 
              //Logger.log($(element).children('.product-param-text').first().text());
            }
          });
          msgProductUpdate+="Artikul: "+vals[row][colArtikul]+";\n"         
        } 

        
         
        if ((""+vals[row][colDescription]).length === 0) $('.card-info-text').children().each(function (i, elem) {            
           vals[row][colDescription] += (((""+vals[row][colDescription]).length > 0)?("\n"):(""))+(($(this).children().length>0)?($(this).children().after('\n').parent().text()):($(this).text().trim()));
        });
        if ((""+vals[row][colDescription]).length === 0) {vals[row][colDescription] = $('.card-info-text').text(); 
          msgProductUpdate+="Description: "+vals[row][colDescription]+";\n"}

        if ((""+vals[row][colDiscount]).length === 0) vals[row][colDiscount] = 0;
        if ((""+vals[row][colPrice]).length === 0) vals[row][colPrice] = 0;
        if ((""+vals[row][colIsNew]).length === 0) vals[row][colIsNew] = false;
        if ((""+vals[row][colDetail]).length === 0) vals[row][colDetail] = '';
        if ((""+vals[row][colIsActive]).length === 0) vals[row][colIsActive] = true;

        

        var productsParameters = getProductsParams(url,vals[row][colName],vals[row][colBrand]);

        if ((""+vals[row][colCategory]).length === 0) {vals[row][colCategory] = productsParameters.category;
          msgProductUpdate+="Category: "+vals[row][colCategory]+";\n"}  
        if ((""+vals[row][colType]).length === 0) {vals[row][colType] = productsParameters.type;
          msgProductUpdate+="Type: "+vals[row][colType]+";\n"}  
        if ((""+vals[row][colBrandLine]).length === 0) {vals[row][colBrandLine] = productsParameters.brandLine;
          msgProductUpdate+="BrandLine: "+vals[row][colBrandLine]+";\n"}  
        if ((""+vals[row][colBrandSeries]).length === 0) {vals[row][colBrandSeries] = productsParameters.brandSeries;
          msgProductUpdate+="BrandSeries: "+vals[row][colBrandSeries]+";\n"}  

        
             

        if ((""+vals[row][colDopolnitelno]).length === 0) {          
          const $trs =$('.product-param-content');
          $trs.each((index, element)=>{
            if ($(element).children('.product-param-title').first().text().toLowerCase().indexOf('объём')>=0)
            {              
                

              vals[row][colDopolnitelno] +=(((""+vals[row][colDopolnitelno]).length > 0)?("\n"):("")) +$(element).children('.product-param-title').first().text().trim()+" "+ $(element).children('.product-param-text').first().text().trim();
              //Logger.log($(element).children('.product-param-title').first().text().trim()+" "+ $(element).children('.product-param-text').first().text().trim());              
            }

            
          }); 
          msgProductUpdate+="Dopolnitelno: "+vals[row][colDopolnitelno]+";\n"             
        }  

        
        if ((""+vals[row][colImageUrl]).length === 0 && $('.rsImg').length>0) {vals[row][colImageUrl] = "https://estel.pro"+$('.rsImg').first().attr().href; 
          msgProductUpdate+="ImageUrl: "+vals[row][colImageUrl]+";\n"}       
        if ((""+vals[row][colImageUrl]).length === 0 && $('.card-img-wrap-single').children('img').length>0) {
          if ($('.card-img-wrap-single').children('img').first().attr().src.toString().indexOf('files')>0) 
            vals[row][colImageUrl] = "https://estel.pro"+$('.card-img-wrap-single').children('img').first().attr().src;
          else
          if ($('.card-img-wrap-single').children('img').first().attr('data-pagespeed-lazy-src') && $('.card-img-wrap-single').children('img').first().attr('data-pagespeed-lazy-src').indexOf('files')>0) vals[row][colImageUrl] = "https://estel.pro"+$('.card-img-wrap-single').children('img').first().attr('data-pagespeed-lazy-src');
        
          msgProductUpdate+="ImageUrl: "+vals[row][colImageUrl]+";\n"} 

          //Logger.log("!"+($('.rsImg').length>0 && true));
      }

      if (msgProductUpdate.length>0)
      {
        Logger.log(msgProductUpdate);
        // Logger.log(vals[row]);
      }

      //Logger.log(worksheet.getRange(row+1,1, 1, 12).getValues());
      //Logger.log(vals[row]);


      

      // var fi = vals[row][FI_COLUMN];
      // var nisha = vals[row][NISHA_COLUMN];

      // if ((""+id).length === 0 &&(""+fi).length === 0 &&(""+nisha).length === 0) k++;//если ФИ и ниша и номер пустые - считаем
      // if (k>=NUM_NULL_ATTEMPTS) break;
      
      // if ((""+id).length === 0 &&(""+fi).length != 0 &&(""+nisha).length != 0) {//ФИ и ниша заполнены, номер пустой        
      //   k=0;//сброс счетчика
      //   i++;
      //   worksheet.getRange(row+1, AUTOINC_COLUMN+1).setValue(uniqueIndex+i);//новый номер
      // }

      

    } catch(ex) {
      // Keep calm and carry on
      changed = false;
    }

    if (changed) {
      var matrix = [];
      matrix[0] = [];
      matrix[0] =vals[row];
      //Logger.log(matrix);
      worksheet.getRange(row+1,1,1, numColsReport).setValues(matrix);      
    }
  }
  
  /*if (url == '') url = 'https://cehko.ru/catalog/care_basics_3/c_ehko_care_basics_serebristyy_shampun_silber_shampoo_250_ml/';
  const contentText = UrlFetchApp.fetch('https://cehko.ru/catalog/care_basics_3/c_ehko_care_basics_serebristyy_shampun_silber_shampoo_250_ml/').getContentText();
  const $ = Cheerio.load(contentText);

  Logger.log($('.changeShortDescription').first().text());*/

}

